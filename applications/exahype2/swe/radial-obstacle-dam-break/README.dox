/**

@page applications_exahype2_swe_radial_obstacle_dam_break Radial Obstacle Dam Break

Scenario simulating a radial dam break enclosed by a dry bathymetry ring.

\f{align*}{
r &= \sqrt{(\frac{N}{2} - x)^2 + (\frac{N}{2} - y)^2} \\
h(x, y, 0) &= \begin{cases}
  1.1 & \text{if } r \leq{} \frac{N}{10} \\
  0.0 & \text{if } 2\frac{N}{10} \leq{} r \leq{} 3\frac{N}{10} \\
  1.0 & \text{otherwise} \\
\end{cases} \\
hu(x, y, 0) &= 0.0 \\
hv(x, y, 0) &= 0.0 \\
b(x, y) &= \begin{cases}
  2.0 & \text{if } 2\frac{N}{10} \leq{} r \leq{} 3\frac{N}{10} \\
  -1.0 & \text{otherwise} \\
\end{cases}
\f}

Where @f$ (x, y) \in [0, N] \times [0, N] @f$ in meters.

## How to Build and Run

For a general overview and all options on how to retrieve and configure the project, refer to @ref page_installation.

### Using CMake

    cd myPeanoDirectory && mkdir build && cd build
    CC=gcc CXX=g++ cmake .. -DWITH_MULTITHREADING=omp -DENABLE_EXAHYPE=ON -DENABLE_LOADBALANCING=ON -DENABLE_BLOCKSTRUCTURED=ON
    make -j && make test
    cd applications/exahype2/swe/radial-obstacle-dam-break/
    export PYTHONPATH=$PYTHONPATH:myPeanoDirectory/python
    python3 radial-obstacle-dam-break.py
    ./ExaHyPE2-SWE-FWaveRiemannGlobalAdaptiveFV-Release

### Using Automake

    cd myPeanoDirectory
    libtoolize; aclocal; autoconf; autoheader; cp src/config.h.in .; automake --add-missing
    CFLAGS="-fopenmp" CC=gcc CXXFLAGS="-std=c++20 -fopenmp" CXX=g++ LDFLAGS="-fopenmp" \
    ./configure --with-multithreading=omp --enable-exahype --enable-loadbalancing --enable-blockstructured
    make -j && make check
    cd applications/exahype2/swe/radial-obstacle-dam-break/
    export PYTHONPATH=$PYTHONPATH:myPeanoDirectory/python
    python3 radial-obstacle-dam-break.py
    ./ExaHyPE2-SWE-FWaveRiemannGlobalAdaptiveFV-Release

Where `CC=gcc CXX=g++` can be any set of compilers.

## Visualise the Simulation Output

    python3 radial-obstacle-dam-break.py --visualise

*/
