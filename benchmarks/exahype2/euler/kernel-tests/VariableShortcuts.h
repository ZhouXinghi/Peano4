// **********************************************************************************************
// ***                                     !!!WARNING!!!                                      ***
// *** WARNING: AUTO GENERATED FILE! DO NOT MODIFY BY HAND! YOUR CHANGES WILL BE OVERWRITTEN! ***
// ***                                     !!!WARNING!!!                                      ***
// ***                  Generated by Peano's Python API: www.peano-framework.org              ***
// **********************************************************************************************
#pragma once

namespace benchmarks {namespace exahype2 {namespace kernelbenchmarks {
  struct VariableMetrics;
  class VariableShortcuts;
}}}

struct benchmarks::exahype2::kernelbenchmarks::VariableMetrics {
  static constexpr int NumberOfDistinctVariables  = 3;
  static constexpr int NumberOfUnknowns           = 4;
  static constexpr int NumberOfAuxiliaryVariables = 0;
  static constexpr int Size                       = 4+0;
};

/**
 * Positions of fields in the vector of unknowns.
 *
 * With these constants, you can write Q[g11], Q[K22] and Q[B33] instead of
 * Q[0], Q[9] and Q[34]. Your code is meaningful in terms of physics while
 * you still access on a C-array level.
 *
 * You might want to use a typedef to shorten the notation.
 */
class benchmarks::exahype2::kernelbenchmarks::VariableShortcuts : public benchmarks::exahype2::kernelbenchmarks::VariableMetrics {
public:
  // Positions of fields inside the unknown vector (solution vector) Q
  static constexpr int Q[NumberOfDistinctVariables + 1] = { 0,1, 3 };

  
    static constexpr int rho = 0;
  
    static constexpr int v = 1;
  
    static constexpr int e = 3;
  

  constexpr int operator [] (const int index) const noexcept { return Q[index]; }
  constexpr int operator () (const int index) const noexcept { return Q[index]; }
};