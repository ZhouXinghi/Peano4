/**

@page swift_initial_conditions Initial conditions, particle insertion and initial mesh construction

Swift 2 always runs through the same sequence of setup steps prior to the
actual calculation:

1. Create a regular mesh that is just as fine that it can accommodate the
   largest predicted search radius of all particles.
2. Insert the particles (initial condition).
3. Run a set of initialisation steps, where particles can define some
   "warm up" calculation steps and are also sorted once more, should they
   have been inserted into the wrong cells.

# The initial (regular) mesh

The first step is important, even though particles are allowed to change
their search radius. It is important to tell the code base right from
the start what the biggest and smallest radius might be, but the radius
can change freely in-between those thresholds. Actually the radius might
even become smaller, but the mesh width you pass in initially is used to
constrain the AMR throughout the simulation.

The dynamic  mesh refinement might decide to introduce an extremely fine
mesh in some places and to erase the mesh somewhere else.
However, we have to start somewhere, as we do not want to run the initial
insertion of particles into a single cell, then great this initial grid
(which is obviously guided by the particle distribution) and finally create
the adaptive grid. Instead, the code creates some initial grid and load
balances this one. After that, it inserts the particles (in parallel) and
might still change both the load balancing and the mesh structure. But we
have to start somewhere.

By default, the initial grid is a regular mesh controlled by the potential
maximal particle search radius. As pointed out: this search radius can
change over time and thus is solely an initial indicator. You can alter the
initial mesh and hence start with an adaptive one right from the start. For
this, you can take the step algorithm_step_create_grid which is an attribute
of your swift2.Project and add further action sets which refine your mesh
according to your needs. However, the initial grid construction will try
to establish a stationary grid, so ensure that you define a stationary
grid, i.e. not a grid where you sometimes erase parts and sometimes add
parts.


# Initial conditions

The initial conditions are added by one mesh sweep modelled by the project's
attribute algorithm_step_initial_conditions. It represents the grid sweep,
i.e. mesh sweep, which sets up the inition condition. That is, if you
want to insert particles, you have to add action sets to this algorithm
step calling add_action_set(). The passed action sets have to
throw all the particles you want to have into your mesh.
There are three mainstream ways to implement initial conditions for the
simulations:

  - Insert particle by coordinates (```python/swift2/input/InsertParticlesByCoordinates.py```).
  - Insert particle along a regular mesh (```python/swift2/input/InsertParticlesAlongCartesianGrid.py```).
  - Insert particles from an HDF5 file (```python/swift2/input/InsertParticlesFromHDF5File.py```).

Nothing stops you from additing further action sets to
algorithm_step_initial_conditions. Some scenarios, for example, hard code
the initial condition of further particles. The @ref tests_swift2_planet_orbit "planet orbit benchmark"
is such an example, where no input files are required.


The particle inserters as discussed above typically only set a subset of
the particle attributes. They are generic tools and thus cannot know which
attributes your particle actually hosts and requires to be set. To discuss
how to initialise the attributes, we have to distinguish two types of
attributes:

1. There are attributes which are domain-specific and have to be set by
   the initial conditions to meaningful values.
2. There are attributes which have to be calculated prior to the kick
   off of the simulation.

To set the intial conditions, it is worth looking into the documentation
of your particle inserter of choice. Most of them allow you to add some
further initialisation snippets or tailor the reader, such that you can
set the particle attributes of interest. Alternatively, you might want to
create a subclass of a generic file reader that is specific to your setup
and, for example, grabs additional particle attributes from the input
file.

If you don't want to mess with the particle reader, nothing stops you from
adding an additional action set to the initial condition sweep. This set can
run over all particles within a vertex - once they are inserted - and set
meaningful attribute values.

If you have to calculate particle attributes after the particles are thrown
into the domain, these calculations are best modelled as
@ref swift_particle_new_solver "steps within the particle lifecycle".


<!-- Use 'section' command here to be able to reference the section somewhere
    else rather than the entire page. 'section' corresponds to h1. First word
    after 'section' cmd will be the anchor ID you need to use with the 'ref' cmd. -->
@section page_swift_initial_conditions_SwiftHDF5 Insert particles from an HDF5 file

A basic HDF5 reader that is compatible with IC files from the original Swift code is
implemented in ```InsertParticlesFromHDF5File.py```.
In order to make use of the HDF5 Initial conditions reader, Peano must have been
configured with HDF5 enabled and linked. Instructions are provided
@ref section_compile_swift2_with_hdf5 "here". Also make sure to install the
@ref section_swift2_python_hdf5 "Python hdf5 libraries", which may be required for
python scripts which generate the initial conditions.




# General remarks on particle insertion

There are a few key policies to follow whenever you insert particles:

1. Particles have to be created on the heap, i.e. via an explicit new

2. Every particle has to be initialised. You do this by calling toolbox::particles::init().
   As you need need this helper routine, you have to include toolbox/particles/particles.h.

3. Particles have to be inserted into cells, and you should not try to do this
   on your own. Instead use the helper function from particles.h:

~~~~~~~~~~~~~~~~~~~~~~
      toolbox::particles::insertParticleIntoCell(
        marker,
        particle,
        fineGridVerticesParticleSet
      );
~~~~~~~~~~~~~~~~~~~~~~

Obviously, the names for the parameters for toolbox::particles::insertParticleIntoCell()
depend on the location from where you call the routine.
As you insert particles into cells (even though the code will then assign
them to vertices adjacent to the cells), you plug into touchCellFirstTime()
or touchCellLastTime(). I recommend the former. These two events always are
given a parameter

~~~~~~~~~~~~~~~~~~~~~~
   const peano4::datamanagement::CellMarker& marker
~~~~~~~~~~~~~~~~~~~~~~

and you can use peano4::datamanagement::CellMarker::isContained() to check
if a particle should be fitted into a cell.


*/
