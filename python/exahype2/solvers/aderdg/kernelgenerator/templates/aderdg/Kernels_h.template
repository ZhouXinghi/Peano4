{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#ifndef _EXAHYPE_{{guardNamespace}}_KERNELS_H_
#define _EXAHYPE_{{guardNamespace}}_KERNELS_H_

#ifndef __INTEL_COMPILER
#include <mm_malloc.h>
#endif
#include <vector>

#include "tarch/la/Vector.h"

{% if "std::float16_t" in computePrecisions or "std::bfloat16_t" in computePrecisions or correctorStoragePrecision=="std::float16_t" or correctorStoragePrecision=="std::bfloat16_t" %}
#include <stdfloat>
{% endif %}

//forward declaration of the user solver
{% for namespaceName in solverNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

  class {{solverClass}};
  
{% for namespaceName in solverNamespaceList %}
}
{% endfor %}


{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}
{% if isLinear %}
  template <typename cStoreType, typename pCompType, typename pStoreType>
  int fusedSpaceTimePredictorVolumeIntegral(
    {{solverName}}& solver,
    pCompType* __restrict__ lduh,
    pStoreType* __restrict__ lQhbnd,
    pStoreType* __restrict__ lFhbnd,
{% if useSplitCK %}
    double* __restrict__ lQi,
    double* __restrict__ lQiNext,
    double* __restrict__ lPi,   // for NCP or Source
    double* __restrict__ lQhi,
    double* __restrict__ lFhi,
    double* __restrict__ gradQ, // for NCP or Source
    double* __restrict__ PSi,   // for pointSource
{% else %}
    pCompType* __restrict__ lQi,
    pCompType* __restrict__ lFi,
    pCompType* __restrict__ lSi,   // for NCP or Source
    pCompType* __restrict__ lQhi,
    pCompType* __restrict__ lFhi,
    pCompType* __restrict__ lShi,  // for NCP or Source
    pCompType* __restrict__ gradQ, // for NCP or Source
    pCompType* __restrict__ PSi,   // for pointSource
    pCompType* __restrict__ PSderivatives, // for pointSource
{% endif %}
    const cStoreType* const __restrict__ luh,
    const tarch::la::Vector<Dimensions,double>&  x,
    const tarch::la::Vector<Dimensions,double>&  dx,  
    const double tStep, // == t
    const double dt,
    std::vector<int>* pointSources // will be deleted in the end if set
  );
{% if usePointSources %}
  template <typename cStoreType, typename pCompType, typename pStoreType>
  int fusedSpaceTimePredictorVolumeIntegral_WithoutPS(
    {{solverName}}& solver,
    pCompType* __restrict__ lduh,
    pStoreType* __restrict__ lQhbnd,
    pStoreType* __restrict__ lFhbnd,
{% if useSplitCK %}
    double* __restrict__ lQi,
    double* __restrict__ lQiNext,
    double* __restrict__ lPi,   // for NCP or Source
    double* __restrict__ lQhi,
    double* __restrict__ lFhi,
    double* __restrict__ gradQ, // for NCP or Source
    double* __restrict__ PSi,   // for pointSource
{% else %}
    pCompType* __restrict__ lQi,
    pCompType* __restrict__ lFi,
    pCompType* __restrict__ lSi,   // for NCP or Source
    pCompType* __restrict__ lQhi,
    pCompType* __restrict__ lFhi,
    pCompType* __restrict__ lShi,  // for NCP or Source
    pCompType* __restrict__ gradQ, // for NCP or Source
    pCompType* __restrict__ PSi,   // for pointSource
    pCompType* __restrict__ PSderivatives, // for pointSource
{% endif %}
    const cStoreType* const __restrict__ luh,
    const tarch::la::Vector<Dimensions,double>&  x,
    const tarch::la::Vector<Dimensions,double>&  dx,  
    const double tStep, // == t
    const double dt,
    std::vector<int>* pointSources // will be deleted in the end if set
  );
{% endif %}{# usePointSources #}
{% else %}{# isLinear #}
  template <typename cStoreType, typename pCompType, typename pStoreType>
  int fusedSpaceTimePredictorVolumeIntegral(
    {{solverName}}& solver,
    pCompType* __restrict__ lduh,
    pStoreType* __restrict__ lQhbnd,
    pStoreType* __restrict__ lGradQhbnd,
    pStoreType* __restrict__ lFhbnd,
    pCompType* __restrict__ lQi,
    pCompType* __restrict__ rhs,
{% if predictorRecompute %}
    double* __restrict__ lPi,
{% else %}
    pCompType* __restrict__ lFi,
    pCompType* __restrict__ lSi,   // for NCP or Source
{% endif %}
    pCompType* __restrict__ lQhi,
    pCompType* __restrict__ lFhi,
    pCompType* __restrict__ lShi,  // for NCP or Source
    pCompType* __restrict__ gradQ, // for NCP or Source or viscousFlux
{% if not predictorRecompute %}
    pCompType* __restrict__ gradQAvg, // for viscousFlux
{% endif %}
    const cStoreType* const __restrict__ luh,
    const tarch::la::Vector<Dimensions,double>&  x,
    const tarch::la::Vector<Dimensions,double>&  dx,
    const double timeStamp,
    const double dt
  );

  template <typename cStoreType, typename pCompType>
  pCompType picard_iteration(
    {{solverName}}& solver,
    pCompType* __restrict__ lQi,
    pCompType* __restrict__ rhs,
    pCompType* __restrict__ lFi,
    pCompType* __restrict__ lSi,   // for NCP or Source
    pCompType* __restrict__ gradQ, // for NCP or Source or viscousFlux
    pCompType* __restrict__ new_lQi_slice,
    const pCompType* __restrict__ dudxT_by_dx,
    const cStoreType* const __restrict__ luh,
    const tarch::la::Vector<Dimensions,double>&  volumeCentre,
    const tarch::la::Vector<Dimensions,double>&  dx,
    const double timeStamp,
    const double dt
  );
{% endif %}

  template<typename cStoreType, typename compType>
  void solutionUpdate( 
    cStoreType* __restrict__ luh,
    const cStoreType* __restrict__ const luhOld, 
    const compType* __restrict__ const lduh, 
    const double dt
  );
  
  void surfaceIntegral( 
    double* __restrict__ lduh, 
    const double* __restrict__ const lFhbnd, 
    const double inverseDx //Assume dx[0] == dx[1] == dx[2]
  );
  
  template <typename solutionType, typename cCompType>
  void faceIntegral(
    solutionType *lduh, 
    const cCompType *const lFhbnd,
    const int direction, 
    const int orientation,
    const double inverseDxDirection
  );

  void solutionAdjustment(
    {{solverName}}& solver,
    double* luh,
    const double* const center,
    const double dx, //Assume dx[0] == dx[1] == dx[2]
    const double t,
    const double dt
  );

template <typename cCompType>
  void riemannSolver( 
    {{solverName}}& solver,
    cCompType* __restrict__ FL,
    cCompType* __restrict__ FR,
    const cCompType* __restrict__ const QL,
    const cCompType* __restrict__ const QR,
    const double t,
    const double dt,
    const tarch::la::Vector<Dimensions,double>& faceCentre,
    const tarch::la::Vector<Dimensions,double>& dx,
    const int direction
  );

  double stableTimeStepSize(
    {{solverName}}& solver,
    const double* __restrict__ const luh,
    const tarch::la::Vector<Dimensions, double>& cellCentre,
    const tarch::la::Vector<Dimensions, double>& dx,
    const double t,
    const double last_dt
  );

  template <typename cCompType>
  void boundaryConditions(
    {{solverName}}& solver,
    cCompType* fluxOut, 
    cCompType* stateOut, 
    const cCompType* const fluxIn, 
    const cCompType* const stateIn, 
    const cCompType* const gradStateIn, 
    const tarch::la::Vector<Dimensions,double>& cellCentre,
    const tarch::la::Vector<Dimensions,double>& cellSize,
    const double t,const double dt, 
    const int faceIndex, 
    const int normalNonZero 
  );

{% if usePointSources %}
  std::vector<int>* getPointSources(
    {{solverName}}& solver,
    const tarch::la::Vector<Dimensions,double>& center,
    const tarch::la::Vector<Dimensions,double>& dx
  );
{% endif %}
  
//AMR Routines
//------------

  void faceUnknownsProlongation(
    double* __restrict__ lQhbndFine,
    double* __restrict__ lFhbndFine,
    const double* const __restrict__ lQhbndCoarse,
    const double* const __restrict__ lFhbndCoarse,
    const int coarseGridLevel,
    const int fineGridLevel,
    const int* const subfaceIndex
  );
  
  // used by faceIntegral, only __restrict__ the flux on the face
  void faceFlux__restrict__ion(
    double* __restrict__ lFhbndCoarse,
    const double* const __restrict__ lFhbndFine,
    const int* const subfaceIndex,
    const int levelDelta
  );

  void volumeUnknownsProlongation(
    double* __restrict__ luhFine,
    const double* const __restrict__ luhCoarse,
    const int coarseGridLevel,
    const int fineGridLevel,
    const int* const subcellIndex
  );
  
  void volumeUnknowns__restrict__ion(
    double* __restrict__ luhCoarse,
    const double* const __restrict__ luhFine,
    const int coarseGridLevel,
    const int fineGridLevel,
    const int* const subcellIndex
  );

  
{% for namespaceName in codeNamespaceList %}
}
{% endfor %}

#include "{{pathToOptKernel}}/ConfigurationParameters.cpph"
{% if useVectPDEs %}
#include "{{pathToOptKernel}}/matrixUtils.cpph"
{% endif %}

#endif // _EXAHYPE_{{guardNamespace}}_KERNELS_H_
