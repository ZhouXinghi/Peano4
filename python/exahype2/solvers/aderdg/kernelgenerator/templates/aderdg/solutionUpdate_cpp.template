{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

// update the elements 

#include "{{pathToOptKernel}}/Kernels.h"
#include "{{pathToOptKernel}}/Quadrature.h"

template<typename cStoreType, typename compType>
void {{codeNamespace}}::solutionUpdate( 
  cStoreType* __restrict__ luh,
  const cStoreType* __restrict__ const luhOld,
  const compType* __restrict__ const lduh, 
  const double dt
) {
#ifdef __INTEL_COMPILER
  __assume_aligned(Quadrature<compType>::iweights3, {{alignmentSize}});
  __assume_aligned(luh,       {{alignmentSize}}); //luh    should be aligned, see Solver.h
  __assume_aligned(luhOld,    {{alignmentSize}}); //luhOld should be aligned, see Solver.h
  __assume_aligned(lduh,      {{alignmentSize}}); //lduh   should be aligned, see Solver.h
#endif

  for (int xyz = 0; xyz < {{nDof**nDim}}; xyz++) {
    const compType coeff = dt*Quadrature<compType>::iweights3[xyz];
    #pragma omp simd aligned(luh,luhOld,lduh:{{alignmentSize}})
    for (int n = 0; n < {{nVar}}; n++) { //update only the variables, lduh contains no parameters
      luh[xyz*{{nData}}+n] = luhOld[xyz*{{nData}}+n] + coeff*lduh[xyz*{{nVarPad}}+n]; //simd+fma
    }
  }
 
}

{% for precision_num in range(0,computePrecisions|length) %}
template void {{codeNamespace}}::solutionUpdate( 
  {{correctorStoragePrecision}}* __restrict__ luh,
  const {{correctorStoragePrecision}}* __restrict__ const luhOld,
  const {{computePrecisions[precision_num]}}* __restrict__ const lduh, 
  const double dt);
{% endfor %}