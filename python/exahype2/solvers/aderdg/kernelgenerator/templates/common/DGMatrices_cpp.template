{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#include "{{pathToOptKernel}}/DGMatrices.h"

//DGMatrices
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::Kxi;
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::Kxi_T;
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::iK1_T;
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::dudx;
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::dudx_T;
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::FLCoeff;
template <typename T> T* {{codeNamespace}}::DGMatrices<T>::FRCoeff;
template <typename T> T** {{codeNamespace}}::DGMatrices<T>::fineGridProjector1d;
template <typename T> T** {{codeNamespace}}::DGMatrices<T>::fineGridProjector1d_T_weighted;

{% for precision_number in range(0,computePrecisions|length) %}
template class {{codeNamespace}}::DGMatrices<{{computePrecisions[precision_number]}}>;
{% endfor %}

{% for precision_number in range(0,computePrecisions|length) %}
template <>
void {{codeNamespace}}::DGMatrices<{{computePrecisions[precision_number]}}>::freeDGMatrices() {
  _mm_free(FLCoeff);
  _mm_free(FRCoeff);
  _mm_free(dudx);
  _mm_free(dudx_T);
  _mm_free(iK1_T);
  _mm_free(Kxi);
  _mm_free(Kxi_T);
  
  _mm_free(fineGridProjector1d[0]);
  _mm_free(fineGridProjector1d[1]);
  _mm_free(fineGridProjector1d[2]);
  delete [] fineGridProjector1d;
  
  _mm_free(fineGridProjector1d_T_weighted[0]);
  _mm_free(fineGridProjector1d_T_weighted[1]);
  _mm_free(fineGridProjector1d_T_weighted[2]);
  delete [] fineGridProjector1d_T_weighted;
}


template <>
void {{codeNamespace}}::DGMatrices<{{computePrecisions[precision_number]}}>::initDGMatrices() {
  
  FLCoeff = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad}}, {{alignmentSize}});
  FRCoeff = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad}}, {{alignmentSize}});
  //note: FLCoeff is also F0
  
  dudx    = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});
  dudx_T  = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});
  iK1_T   = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});
  Kxi     = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});
  Kxi_T   = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});

  fineGridProjector1d            = new {{computePrecisions[precision_number]}}* [3];
  fineGridProjector1d_T_weighted = new {{computePrecisions[precision_number]}}* [3];
  for(int i=0; i<3; i++) {
    fineGridProjector1d[i]            = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});
    fineGridProjector1d_T_weighted[i] = ({{computePrecisions[precision_number]}} *) _mm_malloc(sizeof({{computePrecisions[precision_number]}})*{{nDofPad*nDof}}, {{alignmentSize}});
  }
  
{% for i in nDofPad_seq %}
  FLCoeff[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(FLCoeff[i])}};
{% endfor %}

{% for i in nDofPad_seq %}
  FRCoeff[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(FRCoeff[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  dudx[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(dudx[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  dudx_T[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(dudx_T[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  iK1_T[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(iK1_T[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  Kxi[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(Kxi[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  Kxi_T[{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(Kxi_T[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  fineGridProjector1d[0][{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(fineGridProjector1d_0[i])}};
{% endfor %}
{% for i in nDofPadTimesnDof_seq %}
  fineGridProjector1d[1][{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(fineGridProjector1d_1[i])}};
{% endfor %}
{% for i in nDofPadTimesnDof_seq %}
  fineGridProjector1d[2][{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(fineGridProjector1d_2[i])}};
{% endfor %}

{% for i in nDofPadTimesnDof_seq %}
  fineGridProjector1d_T_weighted[0][{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(fineGridProjector1d_T_weighted_0[i])}};
{% endfor %}
{% for i in nDofPadTimesnDof_seq %}
  fineGridProjector1d_T_weighted[1][{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(fineGridProjector1d_T_weighted_1[i])}};
{% endfor %}
{% for i in nDofPadTimesnDof_seq %}
  fineGridProjector1d_T_weighted[2][{{i}}] = ({{computePrecisions[precision_number]}}) {{"{:.15e}".format(fineGridProjector1d_T_weighted_2[i])}};
{% endfor %}
}
{% endfor %}
