{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#pragma once

#include <mm_malloc.h> //g++
#include <set>
{% if "std::float16_t" in computePrecisions or "std::bfloat16_t" in computePrecisions %}
#include <stdfloat>
{% endif %}


{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}
// All matrices are stored as column major array, _T denote a transposed

template <typename T>
class DGMatrices{
  public:
    static void initDGMatrices();
    static void freeDGMatrices();

    static T *Kxi;
    static T *Kxi_T;
    static T *iK1_T; //note: the generic version of iK1 is actually transposed
    static T *dudx;
    static T *dudx_T;
    static T *FLCoeff;
    static T *FRCoeff;
    static T ** fineGridProjector1d;
    static T ** fineGridProjector1d_T_weighted; // [k][i*nDof+j] = fineGridProjector1d[k][j*nDof+i] * weight[j] / weight[i] / 3.0
};

{% for namespaceName in codeNamespaceList %}
}
{% endfor %}

