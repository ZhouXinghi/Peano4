{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#pragma once

#include <mm_malloc.h> //g++
{% if "std::float16_t" in computePrecisions or "std::bfloat16_t" in computePrecisions %}
#include <stdfloat>
{% endif %}

// Use {{quadratureType}} quadrature

{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

template<typename T>
class Quadrature{
  public:
    static void initQuadratureNodesAndWeights();
    static void freeQuadratureNodesAndWeights();

    static T *nodes;
    static T *weights1;
    static T *weights2;
    static T *weights3;
    static T *weights4;
    static T *iweights1;
    static T *iweights3;

    {% if kernelType=="limiter" %}
    // limiter projection matrices
    static T* uh2lob;
    static T* dg2fv;
    static T* fv2dg;
    {% endif %}
};

{% for namespaceName in codeNamespaceList %}
}
{% endfor %}
