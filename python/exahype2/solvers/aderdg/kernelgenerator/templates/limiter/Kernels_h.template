{# /**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/ #}

#ifndef _EXAHYPE_{{guardNamespace}}_KERNELS_H_
#define _EXAHYPE_{{guardNamespace}}_KERNELS_H_

#ifndef __INTEL_COMPILER
#include <mm_malloc.h>
#endif
#include <vector>

#include "tarch/la/Vector.h"

//forward declaration of the user solver
{% for namespaceName in solverNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

  class {{solverClass}};
  
{% for namespaceName in solverNamespaceList %}
}
{% endfor %}




//Limiter
//-------

{% for namespaceName in codeNamespaceList %}
namespace {{namespaceName}} {
{% endfor %}

  void projectOnFVLimiterSpaceWithHalo(const double* const luh, double* const lim);

  void projectOnFVLimiterSpaceWithoutHalo(const double* const luh, double* const lim);

  void projectOnDGSpaceFromFVWithHalo(const double* const lim, double* const luh);

  void projectOnDGSpaceFromFVWithoutHalo(const double* const lim, double* const luh);

  void projectOnFVSpaceWithHaloFromFVWithoutHalo(const double* const fv_wo, double* const fv_with);

  void projectOnFVSpaceWithoutHaloFromFVWithHalo(double* const fv_wo, const double* const fv_with);

  bool isPhysicallyAdmissible(
    const double* const luh,
    {{solverName}}& solver,
    const tarch::la::Vector<Dimensions,double>& cellCentre,
    const tarch::la::Vector<Dimensions,double>& cellSize,
    const double timeStamp
  );

  void findCellLocalMinAndMax(
    const double* const luh,
    {{solverName}}& solver,
    double* const localMinPerVariables, 
    double* const localMaxPerVariable
  );

  void findCellLocalLimiterMinAndMax(
    const double* const lim,
    {{solverName}}& solver,
    double* const localMinPerObservable, 
    double* const localMaxPerObservable
  );

  bool discreteMaximumPrincipleAndMinAndMaxSearch(
    const double* const luh,
    {{solverName}}& solver,
    const double relaxationParameter,
    const double differenceScaling,
    double* boundaryMinPerVariables, 
    double* boundaryMaxPerVariables
  );

  //private
  void compareWithADERDGSolutionAtGaussLobattoNodes(
    const double* const luh,
    {{solverName}}& solver,
    double* min, 
    double* max
  );

  //private
  void compareWithADERDGSolutionAtFVSubcellCenters(
    const double* const luh,
    {{solverName}}& solver,
    double* min, 
    double* max
  );
  
{% for namespaceName in codeNamespaceList %}
}
{% endfor %}

#endif // _EXAHYPE_{{guardNamespace}}_KERNELS_H_
