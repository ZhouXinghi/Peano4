{# /**
  This subtemplate contain macros used in other template/subtemplate
  
  Include it at the start of a template to be able to use the macros
  {% import "subtemplates/macros.template" as m with context %}
  
  To use macros with indentation use {{ m.XXmacr(XXargs...) | indent(XXsize) }}
  and put a jinja comment afterward otherwise you'll get a whitespace after the 
  macro call (known jinja2 issue, https://github.com/pallets/jinja/issues/612)
  */
#}
{#
/**
  Allocate array
*/
#}
{% macro allocateArray(name, size, precision="double", setToZero=False, pointerExists=False, forceStack=False) %}
{% if tempVarsOnStack or forceStack %}
{{precision}} {{name}}[{{size}}] __attribute__((aligned({{alignmentSize}}))){% if setToZero %}  = {0.}{% endif %};
{% else %}
{% if not pointerExists %}{{precision}}* {% endif %}{{name}} = (({{precision}} *) _mm_malloc(sizeof({{precision}})*{{size}}, {{alignmentSize}}));
{% if setToZero %}
std::memset({{name}}, 0, sizeof({{precision}})*{{size}});
{% endif %}
{% endif %}
{% endmacro %} {##}
{#

/**
  Free array
*/
#}
{% macro freeArray(name) %}
{% if not tempVarsOnStack %}
_mm_free({{name}});
{% endif %}
{% endmacro %}
{#

/**
  Matmul, see the subtemplate
      C       = alpha  *   A   *    B   + beta  *  C
   (M x N)              (M x K)  (K x N)
  The gemm config (fetched through matmulKey) contains M, N, K, LDA, LDB, LDC, alpha and beta
*/
#}
{% macro matmul(matmulKey, A, B, C, A_shift, B_shift, C_shift, overrideUseLibxsmm="BoolNotDefined", trueAlpha="", trueB="", forceCoeffMatrix=False) %}
{% include "subtemplates/matmul.template" %}
{% endmacro %}
{#

/**
  Allocate stack tmp arrays for vect PDE.
  Subarray will be allocated too
  Array = name of the array
  blockedDim = if there are multiple dim (for example F for flux splitted into x, y, and z)
*/
#}
{% macro vectPDEsArrays(array, size, blockedDim) %}
{% include "subtemplates/vectPDEsArrays.template" %}
{% endmacro %}
{#

/**
  output the right slope_limiter function to inline
*/
#}
{% macro printSlopeLimiterFunction() %}
{% include "subtemplates/slopeLimiter.template" %}
{% endmacro %}
{#

/**
  copy for gradQ
*/
#}
{% macro gradQAdapter(gradQ,gradQX,gradQY,gradQZ,incr) %}
double {{gradQ}}[{{incr*nDim}}];
std::copy_n({{gradQX}}, {{incr}}, {{gradQ}}); //x
std::copy_n({{gradQY}}, {{incr}}, {{gradQ}}+{{1*incr}}); //y
{% if nDim==3 %}
std::copy_n({{gradQZ}}, {{incr}}, {{gradQ}}+{{2*incr}}); //z
{% endif %}
{% endmacro %}

/**
  initialize libxsmm JIT matrix multiplication kernels
*/
#}
{% macro initializeLibxsmmJIT() %}

/*
 * Initialize libxsmm JIT matrix multiplication kernels
 */
{% for config in matmulConfigs %}

{% set matmulConfig = matmulConfigs[config] %}
{% set precision = matmulConfig.precision[0] %}
{% if precision == "DP" %}
{% set precisionPrefix = "d" %}
{% elif precision== "SP" %}
{% set precisionPrefix = "s" %}
{% endif %}
libxsmm_blasint lda_{{matmulConfig.baseroutinename}}({{matmulConfig.LDA}});
libxsmm_blasint ldb_{{matmulConfig.baseroutinename}}({{matmulConfig.LDB}});
libxsmm_blasint ldc_{{matmulConfig.baseroutinename}}({{matmulConfig.LDC}});
const int flags_{{matmulConfig.baseroutinename}}({% if matmulConfig.beta == 1 %}0{% else %}4{% endif %}); // 0 for beta = 1, 4 for beta = 0

libxsmm_{{precisionPrefix}}mmfunction {{matmulConfig.baseroutinename}} = libxsmm_{{precisionPrefix}}mmdispatch_v2({{matmulConfig.M}}, {{matmulConfig.N}}, {{matmulConfig.K}}, &lda_{{matmulConfig.baseroutinename}}, &ldb_{{matmulConfig.baseroutinename}}, &ldc_{{matmulConfig.baseroutinename}}, &flags_{{matmulConfig.baseroutinename}});
/* if(!{{matmulConfig.baseroutinename}}){
    std::cout << "kernel generation failed for {{matmulConfig.baseroutinename}}\n";
} */
{% endfor %}
{% endmacro %}
