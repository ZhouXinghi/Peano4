# **********************************************************************************************
# ***                                     !!!WARNING!!!                                      ***
# *** WARNING: AUTO GENERATED FILE! DO NOT MODIFY BY HAND! YOUR CHANGES WILL BE OVERWRITTEN! ***
# ***                                     !!!WARNING!!!                                      ***
# ***                  Generated by Peano's Python API: www.peano-framework.org              ***
# **********************************************************************************************

function(capitalise value)
  string(TOUPPER ${value} value_upper)
  string(SUBSTRING ${value_upper} 0 1 value_capitalised)
  string(SUBSTRING ${value} 1 -1 value_rest)
  string(TOLOWER ${value_rest} value_rest)
  string(APPEND value_capitalised ${value_rest})
  set(value_capitalised ${value_capitalised} PARENT_SCOPE)
endfunction()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

set(TARGET_NAME {{EXECUTABLENAME}})
set(GENERATOR {{GENERATOR}})

capitalise("{{MODE}}")
set(PEANO_BUILD_TYPE "${value_capitalised}" CACHE INTERNAL "")
set(PEANO_DIMENSIONS "{{DIM}}" CACHE INTERNAL "")

list(APPEND DEPENDS_CORE {% for item in CMAKE_CORE_LIBS -%} {{item+' '}} {%- endfor %})

list(APPEND H_HEADERS {% for item in H_HEADERS -%} {{item+" "}} {%- endfor %})
list(APPEND CXX_SOURCES {% for item in CXX_SOURCES -%} {{item+" "}} {%- endfor %})
list(APPEND CU_SOURCES {% for item in CU_SOURCES -%} {{item+" "}} {%- endfor %})
list(APPEND FORTRAN_SOURCES {% for item in FORTRAN_SOURCES -%} {{item+" "}} {%- endfor %})

list(APPEND GENERATED_H_HEADERS {% for item in GENERATED_H_HEADERS -%} {{item+" "}} {%- endfor %})
list(APPEND GENERATED_CXX_SOURCES {% for item in GENERATED_CXX_SOURCES -%} {{item+" "}} {%- endfor %})
list(APPEND GENERATED_CU_SOURCES {% for item in GENERATED_CU_SOURCES -%} {{item+" "}} {%- endfor %})
list(APPEND GENERATED_FORTRAN_SOURCES {% for item in GENERATED_FORTRAN_SOURCES -%} {{item+" "}} {%- endfor %})

list(APPEND GENERATED_LDFLAGS {% for item in CMAKE_LDFLAGS -%} {{item+" "}} {%- endfor %})
list(APPEND GENERATED_INCLUDE_DIRS {% for item in GENERATED_INCLUDE_DIRS -%} ${CMAKE_CURRENT_SOURCE_DIR}/{{item+" "}} {%- endfor %})
list(APPEND GENERATED_COMPILE_DEFINITIONS {% for item in CMAKE_COMPILE_DEFINITIONS -%} {{item+" "}} {%- endfor %})

string(TOLOWER "{{MODE}}" PEANO_BUILD_TYPE_LOWER)

# Core libraries
foreach(depends IN LISTS DEPENDS_CORE)
  list(APPEND DEPENDS_FULL "${depends}${PEANO_DIMENSIONS}d_${PEANO_BUILD_TYPE_LOWER}")
endforeach()

# Toolboxes etc.
list(APPEND DEPENDS_FULL ${DEPENDS_OTHER})

# Create an executable as a CMake target.
add_executable(${TARGET_NAME})

list(APPEND SOURCES
  ${CXX_SOURCES}
  ${GENERATED_CXX_SOURCES}
  ${CU_SOURCES}
  ${GENERATED_CU_SOURCES}
  ${FORTRAN_SOURCES}
  ${GENERATED_FORTRAN_SOURCES}
  ${H_HEADERS}
  ${GENERATED_H_HEADERS}
  ${GENERATOR}
)

# Set sources of the executable, we depend on the generated CMake file, the generator script.
target_sources(${TARGET_NAME} PRIVATE ${SOURCES})

# Set default include directories as well as the generated ones.
target_include_directories(${TARGET_NAME} PRIVATE
  ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR}/src ${GENERATED_INCLUDE_DIRS}
)

# Link to full target libraries.
target_link_libraries(${TARGET_NAME} PRIVATE ${DEPENDS_FULL})

# Libraries are generated at $CMAKE_BINARY_DIR, just in case add it to the link directories.
target_link_directories(${TARGET_NAME} PRIVATE ${CMAKE_BINARY_DIR})

target_compile_definitions(${TARGET_NAME} PRIVATE Dimensions=${PEANO_DIMENSIONS} ${${PEANO_BUILD_MODE}_DEFINITIONS})
target_compile_definitions(${TARGET_NAME} PRIVATE ${GENERATED_COMPILE_DEFINITIONS})

target_link_libraries(${TARGET_NAME} PRIVATE project_options)
target_link_libraries(${TARGET_NAME} PRIVATE project_warnings)
target_link_libraries(${TARGET_NAME} PRIVATE ${GENERATED_LDFLAGS})

target_compile_options(${TARGET_NAME} PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${PEANO_CXX_FLAGS_${PEANO_BUILD_MODE}}>)
target_compile_options(${TARGET_NAME} PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:${PEANO_CUDA_FLAGS_${PEANO_BUILD_MODE}}>)

target_link_options(${TARGET_NAME} PRIVATE ${PEANO_${PEANO_BUILD_MODE}_LDFLAGS})

# Link every toolbox, if they are enabled.
if (ENABLE_PARTICLES)
  target_link_libraries(${TARGET_NAME} PRIVATE ToolboxParticles${PEANO_DIMENSIONS}d_${PEANO_BUILD_TYPE_LOWER})
endif()

if(ENABLE_BLOCKSTRUCTURED)
  target_link_libraries(${TARGET_NAME} PRIVATE ToolboxBlockStructured${PEANO_DIMENSIONS}d_${PEANO_BUILD_TYPE_LOWER})
endif()

if(ENABLE_FEM)
  target_link_libraries(${TARGET_NAME} PRIVATE ToolboxFiniteElements${PEANO_DIMENSIONS}d_${PEANO_BUILD_TYPE_LOWER})
endif()

if(ENABLE_LOADBALANCING)
  target_link_libraries(${TARGET_NAME} PRIVATE ToolboxLoadBalancing${PEANO_DIMENSIONS}d_${PEANO_BUILD_TYPE_LOWER})
endif()

if(ENABLE_MULTIPRECISION)
  target_link_libraries(${TARGET_NAME} PRIVATE ToolboxMultiprecision${PEANO_DIMENSIONS}d_${PEANO_BUILD_TYPE_LOWER})
endif()
