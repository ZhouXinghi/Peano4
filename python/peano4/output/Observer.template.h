// **********************************************************************************************
// ***                                     !!!WARNING!!!                                      ***
// *** WARNING: AUTO GENERATED FILE! DO NOT MODIFY BY HAND! YOUR CHANGES WILL BE OVERWRITTEN! ***
// ***                                     !!!WARNING!!!                                      ***
// ***                  Generated by Peano's Python API: www.peano-framework.org              ***
// **********************************************************************************************
#pragma once

#include "tarch/la/Vector.h"
#include "peano4/utils/Globals.h"
#include "peano4/grid/GridControlEvent.h"
#include "peano4/grid/GridTraversalEvent.h"
#include "peano4/grid/TraversalObserver.h"

#include "repositories/DataRepository.h"

{{INCLUDES}}

{% for item in NAMESPACE -%}
  namespace {{ item }} {

{%- endfor %}
  class {{CLASSNAME}};
{% for item in NAMESPACE -%}
  }
{%- endfor %}

class {{NAMESPACE | join("::")}}::{{CLASSNAME}}: public peano4::grid::TraversalObserver {
  public:
    /**
     * Logging device
     */
    static tarch::logging::Log  _log;

    const int _spacetreeId;

{{ATTRIBUTES}}

  public:
    /**
     * If you pass this marker into the constructor, it implies that this 
     * observer is used as prototype for the real observers which are created
     * per local spacetree.
     */
    static constexpr int SpacetreePrototype = -1; 

    /**
     * @param spacetreeId -1 is the dummy, i.e. this observer is not 
     *                    instantiated for a spacetree yet but serves as 
     *                    blueprint for the real trees later on.
     */
    {{CLASSNAME}}(int spacetreeId = SpacetreePrototype);

    virtual void loadCell(
     const peano4::grid::GridTraversalEvent&  event
    ) override;

    virtual void enterCell(
     const peano4::grid::GridTraversalEvent&  event
    ) override;

    virtual void leaveCell(
      const peano4::grid::GridTraversalEvent&  event
    ) override;

    virtual void storeCell(
      const peano4::grid::GridTraversalEvent&  event
    ) override;

    virtual TraversalObserver* clone(int spacetreeId) override;

    virtual std::vector< peano4::grid::GridControlEvent > getGridControlEvents() const override;

    /**
     * This routine is not called by the spacetree set or the spacetree. It is
     * up to the user to invoke it.
     */
    static void prepareTraversal();
    static void unprepareTraversal();

    virtual void beginTraversal(
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h
    ) override;

    virtual void endTraversal(
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h
    ) override;
    
    virtual void exchangeAllVerticalDataExchangeStacks( int masterId ) override;
    virtual void exchangeAllHorizontalDataExchangeStacks( bool symmetricDataCardinality ) override;
    virtual void exchangeAllPeriodicBoundaryDataStacks() override;
    
    virtual void streamDataFromSplittingTreeToNewTree( int newWorker ) override;
    virtual void streamDataFromJoiningTreeToMasterTree( int masterId ) override;
    
    virtual void finishAllOutstandingSendsAndReceives() override;
    
    virtual void sendVertex(int position, int toStack, ::peano4::grid::TraversalObserver::SendReceiveContext context, const peano4::grid::GridTraversalEvent&  event) override;
    virtual void sendFace(  int position, int toStack, ::peano4::grid::TraversalObserver::SendReceiveContext context, const peano4::grid::GridTraversalEvent&  event) override;
    virtual void sendCell(                int toStack, ::peano4::grid::TraversalObserver::SendReceiveContext context, const peano4::grid::GridTraversalEvent&  event) override;

    virtual void receiveAndMergeVertex( int position, int fromStack, SendReceiveContext context, const peano4::grid::GridTraversalEvent& event) override;
    virtual void receiveAndMergeFace(   int position, int fromStack, SendReceiveContext context, const peano4::grid::GridTraversalEvent& event) override;
    virtual void receiveAndMergeCell(                 int fromStack, SendReceiveContext context, const peano4::grid::GridTraversalEvent& event) override;

    virtual void deleteAllStacks() override;
};
