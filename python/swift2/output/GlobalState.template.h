//
// SWIFT2 global state file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to
// generate this file. Backup your manual changes before you do so.
//
#pragma once

#include "toolbox/loadbalancing/strategies/NoLoadBalancing.h"

{% if LOAD_BALANCER!="" -%}
#include "{{LOAD_BALANCER | replace('::', '/') }}.h"
{% endif -%}

#include "peano4/grid/GridStatistics.h"


{% for item in NAMESPACE -%}
  namespace {{ item }} {
{%- endfor %}
  {% if LOAD_BALANCER!="" -%}
  extern {{LOAD_BALANCER}}              loadBalancer;
  {% else -%}
  extern toolbox::loadbalancing::strategies::NoLoadBalancing  loadBalancer;
  {% endif -%}


  /**
   * Return the global min time stamp over all particle species.
   */
  double getMinTimeStamp();

  /**
   * Return max time stamp of all particle species.
   */
  double getMaxTimeStamp();
  double getMinTimeStepSize();
  double getMaxTimeStepSize();

  double getMinSearchRadius();
  double getMaxSearchRadius();

  void startGridConstructionStep();
  void startInitialisationStep();
  void startInitialConditionsStep();
  void startTimeStep();
  void startPlotStep();
  void startIntermediateStep();

  void finishGridConstructionStep();
  void finishInitialisationStep();
  void finishInitialConditionsStep();

  /**
   * Call finishTimeStep() on each individual species and then dump some
   * global information. It is important to call finishTimeStep() first,
   * as it triggers some global reduction.
   */
  void finishTimeStep();
  void finishPlotStep();
  void finishIntermediateStep();

  bool rerunPreviousGridSweep();
{% for item in NAMESPACE -%}
  }
{%- endfor %}


