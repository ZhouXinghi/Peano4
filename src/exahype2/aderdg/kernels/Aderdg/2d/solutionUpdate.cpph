/**
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 **/
#if defined(_GLL)
#include "../../Basis/GaussLobattoBasis.h"
#else
#include "../../Basis/GaussLegendreBasis.h"

#endif    


#include "../../Utils/KernelUtils.h"

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

#if Dimensions == 2

// pType is the precision in which the contribution was computed, typically this would be double

template <typename SolverType, typename pType>
void solutionUpdate(
    SolverType& solver,
    double* luh,
    const double* const luhOld,
    const pType* const lduh,
    const double dt) {
  constexpr int numberOfVariables  = SolverType::NumberOfUnknowns;
  constexpr int numberOfParameters = SolverType::NumberOfAuxiliaryVariables;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int order              = SolverType::Order;
  constexpr int basisSize          = order+1;

  idx3 idx_luh(basisSize, basisSize, numberOfData);
  idx3 idx_lduh(basisSize, basisSize, numberOfVariables);
  for (int i = 0; i < basisSize; i++) {
    for (int j = 0; j < basisSize; j++) {
//      #if defined(_GLL)
//      const double weight = kernels::gaussLobattoWeights[order][i] *
//                            kernels::gaussLobattoWeights[order][j];
//      #else
//      const double weight = kernels::gaussLegendreWeights[order][i] *
//                            kernels::gaussLegendreWeights[order][j];
//      #endif
      const double weight = exahype2::solvers::aderdg::ADERDGSolver::weights[order][i] *
                            exahype2::solvers::aderdg::ADERDGSolver::weights[order][j];

      const double updateSize = dt / weight;

      for (int l = 0; l < numberOfVariables; l++) {
        luh[idx_luh(i, j, l)] = luhOld[idx_luh(i, j, l)] + lduh[idx_lduh(i, j, l)] * updateSize;
      }
    }
  }
}

#endif  // Dimensions == 2

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels
