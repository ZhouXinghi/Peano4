/**
* This file is part of the ExaHyPE project.
* Copyright (c) 2016  http://exahype.eu
* All rights reserved.
*
* The project has received funding from the European Union's Horizon
* 2020 research and innovation programme under grant agreement
* No 671698. For copyrights and licensing, please consult the webpage.
*
* Released under the BSD 3 Open Source License.
* For the full license text, see LICENSE.txt
**/

// included in ../../Kernels.h

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstring>

#include "../../Utils/KernelUtils.h"

namespace kernels {
namespace aderdg {
namespace generic {
namespace c {

/**
* We implement a very simple Rusanov scheme with scalar dissipation
* (smax*Id).
*
* We need to consider material parameters
* in QL and QR.
* We don't need to consider material parameters
* in FL,FR.
*/
template <bool useNCP, typename SolverType>
void riemannSolverNonlinear(SolverType& solver, double* FL, double* FR,
  const double* const QL,
  const double* const QR,
  const double t,
  const double dt,
  const tarch::la::Vector<Dimensions, double>& faceCentre,
  const tarch::la::Vector<Dimensions, double>& dx,
  const int direction) {

  constexpr int numberOfVariables  = SolverType::NumberOfUnknowns;
  constexpr int numberOfParameters = SolverType::NumberOfAuxiliaryVariables;
  constexpr int numberOfData       = numberOfVariables+numberOfParameters;
  constexpr int order              = SolverType::Order;
  constexpr int basisSize          = order+1;

  // Compute the average variables and parameters from the left and the right
  double QavL[numberOfData] = {0.0};
  double QavR[numberOfData] = {0.0};
  kernels::riemannsolvers::util::averageRiemannInputs<basisSize,numberOfData>(
      QL,exahype2::solvers::aderdg::ADERDGSolver::weights,QavL);
  kernels::riemannsolvers::util::averageRiemannInputs<basisSize,numberOfData>(
      QR,exahype2::solvers::aderdg::ADERDGSolver::weights,QavR);

  double LL[numberOfVariables] = {0.0}; // do not need to store material parameters
  double LR[numberOfVariables] = {0.0};

  // Hyperbolic eigenvalues
  const double maxHyperbolicEigenvalueL = solver.maxEigenvalue(QavL, faceCentre, dx, t, dt, direction);
  const double maxHyperbolicEigenvalueR = solver.maxEigenvalue(QavR, faceCentre, dx, t, dt, direction);
  const double smax = std::max(maxHyperbolicEigenvalueL, maxHyperbolicEigenvalueR); 

  // compute fluxes (and fluctuations for non-conservative PDEs)
  double Qavg[numberOfData];
  idx2 idx_gradQ(Dimensions, numberOfVariables);
  double gradQ[numberOfVariables] = {0.0};
  double ncp[numberOfVariables]               = {0.0};
  {
    idx3 idx_FLR(basisSize, basisSize, numberOfVariables);
    idx3 idx_QLR(basisSize, basisSize, numberOfData);

    for (int i = 0; i < basisSize; i++) {
      for (int j = 0; j < basisSize; j++) {

        if(useNCP) { // we don't use matrixB but the NCP call here.
          for(int l=0; l < numberOfVariables; l++) {
            gradQ[l] = QR[idx_QLR(i, j, l)] - QL[idx_QLR(i, j, l)];
          }
          for(int l=0; l < numberOfData; l++) {
            Qavg[l] = 0.5 * (QR[idx_QLR(i, j, l)] + QL[idx_QLR(i, j, l)]);
          }
          
          solver.nonconservativeProduct(
            Qavg,
            gradQ,
            faceCentre,
            dx,
            t,
            dt,
            direction,
            ncp
          );
        }

        // skip parameters
        for (int k = 0; k < numberOfVariables; k++) {
          FL[idx_FLR(i, j, k)] =
              0.5 * (FR[idx_FLR(i, j, k)] + FL[idx_FLR(i, j, k)]) -
              0.5 * smax * (QR[idx_QLR(i, j, k)] - QL[idx_QLR(i, j, k)]);

          if(useNCP) {
            FR[idx_FLR(i, j, k)] = FL[idx_FLR(i, j, k)] - 0.5 * ncp[k];
            FL[idx_FLR(i, j, k)] = FL[idx_FLR(i, j, k)] + 0.5 * ncp[k];
          } else {
            FR[idx_FLR(i, j, k)] = FL[idx_FLR(i, j, k)];
          }
        }
      }
    }
  }
}

}  // namespace c
}  // namespace generic
}  // namespace aderdg
}  // namespace kernels
