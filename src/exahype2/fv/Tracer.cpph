// This file is part of the ExaHyPE2 project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org
#include "peano4/utils/Loop.h"

template <int SourceIndex, int... SourceIndices, typename Particle>
void exahype2::fv::projectValuesOntoParticle_piecewiseConstant(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle
) {
  exahype2::fv::internal::projectValuesOntoParticle_piecewiseConstant<Particle, SourceIndex, SourceIndices...>(
    marker, voxelsPerAxis, unknownsPerVoxel, Q, particle, 0
  );
}

template <int SourceIndex, int... SourceIndices, typename Particle>
void exahype2::fv::projectValuesOntoParticle_piecewiseLinear(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle
) {
  exahype2::fv::internal::projectValuesOntoParticle_piecewiseLinear<Particle, SourceIndex, SourceIndices...>(
    marker, voxelsPerAxis, unknownsPerVoxel, Q, particle, 0
  );
}

template <typename Particle, int SourceIndex, int... SourceIndices>
void exahype2::fv::internal::projectValuesOntoParticle_piecewiseConstant(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle,
  int       destinationIndex
) {
  particle.setData(
    destinationIndex,
    ::exahype2::fv::internal::projectValueOntoParticle_piecewiseConstant(
      marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), destinationIndex
    )
  );
  exahype2::fv::internal::projectValuesOntoParticle_piecewiseConstant<Particle, SourceIndices...>(
    marker, voxelsPerAxis, unknownsPerVoxel, Q, particle, destinationIndex + 1
  );
}

template <typename Particle, int SourceIndex, int... SourceIndices>
void exahype2::fv::internal::projectValuesOntoParticle_piecewiseLinear(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle,
  int       destinationIndex
) {
  particle.setData(
    destinationIndex,
    ::exahype2::fv::internal::projectValueOntoParticle_piecewiseLinear(
      marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), destinationIndex
    )
  );
  exahype2::fv::internal::projectValuesOntoParticle_piecewiseLinear<Particle, SourceIndices...>(
    marker, voxelsPerAxis, unknownsPerVoxel, Q, particle, destinationIndex + 1
  );
}

template <typename Particle>
void exahype2::fv::internal::projectValuesOntoParticle_piecewiseConstant(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle,
  int       destinationIndex
) {}

template <typename Particle>
void exahype2::fv::internal::projectValuesOntoParticle_piecewiseLinear(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle,
  int       destinationIndex
) {}

template <int SourceIndex, int DestIndex, typename Particle>
void exahype2::fv::projectValueOntoParticle_piecewiseConstant(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle
) {
  particle.setData(
    DestIndex,
    ::exahype2::fv::internal::projectValueOntoParticle_piecewiseConstant(
      marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), SourceIndex
    )
  );
}

template <typename Particle>
void exahype2::fv::projectAllValuesOntoParticle_piecewiseConstant(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle
) {
  for (int unknown = 0; unknown < unknownsPerVoxel; unknown++) {
    particle.setData(
      unknown,
      ::exahype2::fv::internal::projectValueOntoParticle_piecewiseConstant(
        marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), unknown
      )
    );
  }
}

template <int SourceIndex, int DestIndex, typename Particle>
void exahype2::fv::projectValueOntoParticle_piecewiseLinear(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle
) {
  particle.setData(DestIndex) = ::exahype2::fv::internal::projectValueOntoParticle_piecewiseLinear(
    marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), SourceIndex
  );
}

template <typename Particle>
void exahype2::fv::projectAllValuesOntoParticle_piecewiseLinear(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  Particle& particle
) {
  for (int unknown = 0; unknown < unknownsPerVoxel; unknown++) {
    double value = ::exahype2::fv::internal::projectValueOntoParticle_piecewiseLinear(
      marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), unknown
    );

    assertion(value == value);
    particle.setData(unknown, value);
  }
}

template <typename Particle>
void exahype2::fv::projectAllValuesOntoParticle_piecewiseLinear_explicit_Euler(
  const peano4::datamanagement::CellMarker& marker,
  int                                       voxelsPerAxis,
  int                                       unknownsPerVoxel,
  const double* __restrict__ Q,
  double                             timeStepSize,
  tarch::la::Vector<Dimensions, int> indices,
  tarch::la::Vector<Dimensions, int> factors,
  Particle&                          particle
) {
  for (int unknown = 0; unknown < unknownsPerVoxel; unknown++) {
    double value = ::exahype2::fv::internal::projectValueOntoParticle_piecewiseLinear(
      marker, voxelsPerAxis, unknownsPerVoxel, Q, particle.getX(), unknown
    );

    assertion(value == value);
    particle.setData(unknown, value);
  }
  
  for (int d = 0; d < Dimensions; d++) {
    particle.setX(d, particle.getX(d) + timeStepSize * factors(d) * particle.getData(indices(d)));
  }
}
