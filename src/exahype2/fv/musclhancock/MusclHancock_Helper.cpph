
namespace {
  /**
   * A lot of the loop routines expect a voxel (or face) index which is
   * a vector over integers. Syntactically, I can just hand over
   *
   * <pre>
     volumeIndex2d(x,y)
     </pre>
   *
   * Peano's vector class then provides the right constructor to convert
   * this into a vector object. However, this constructor has to rely on
   * a while loop that iterates over the arguments. A while loop in return
   * cannot vectorise or be inlined/unrolled. So I need this helper routine
   * which is way less elegant, yet knows how often the underlying while
   * loop is to be unrolled.
   */
  #if defined(GPUOffloadingOMP)
  #pragma omp declare target
  #endif
  tarch::la::Vector<Dimensions,int> volumeIndex2d( int x, int y ) InlineMethod {
    tarch::la::Vector<Dimensions,int> result;
    result(0) = x;
    result(1) = y;
    return result;
  }

  tarch::la::Vector<Dimensions,int> volumeIndex3d( int x, int y, int z ) InlineMethod {
    tarch::la::Vector<Dimensions,int> result;
    result(0) = x;
    result(1) = y;
    result(2) = z;
    return result;
  }
  #if defined(GPUOffloadingOMP)
  #pragma omp end declare target
  #endif
}
