// This file is part of the ExaHyPE2 project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org

template <
  class SolverType,
  int  NumberOfVolumesPerAxisInPatch,
  int  HaloSize,
  int  NumberOfUnknowns,
  int  NumberOfAuxiliaryVariables,
  bool EvaluateFlux,
  bool EvaluateNonconservativeProduct,
  bool EvaluateSource,
  bool EvaluateMaximumEigenvalueAfterTimeStep>
void exahype2::fv::rusanov::timeStepWithRusanovPatchwiseInsituStateless(CellData& patchData, peano4::utils::LoopPlacement loopParallelism) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov");
  logTraceIn("timeStepWithRusanovPatchwiseInsituStateless()");

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::SingleDoFEnumerator        singleVolumeEnumerator(NumberOfUnknowns, 0);

  for (int patchIndex = 0; patchIndex < patchData.numberOfCells; patchIndex++) {
    // ====================================================
    // Copy solution over and evaluate source (if required)
    // ====================================================
    if constexpr (EvaluateSource) {
#if Dimensions == 2
#pragma omp simd collapse(2)
      for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          loopbodies::copySolutionAndAddSourceTerm<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            patchData.QOut[patchIndex],
            QOutEnumerator
          );
        }
      }
#else
#pragma omp simd collapse(3)
      for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
        for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            loopbodies::copySolutionAndAddSourceTerm<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y, z),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              patchData.QOut[patchIndex],
              QOutEnumerator
            );
          }
        }
      }
#endif
    } else {
#if Dimensions == 2
#pragma omp simd collapse(3)
      for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
            loopbodies::copySolution(patchData.QIn[patchIndex], QInEnumerator, patchIndex, volumeIndex(x, y), unknown, patchData.QOut[patchIndex], QOutEnumerator);
          }
        }
      }
#else
#pragma omp simd collapse(4)
      for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
        for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
              loopbodies::copySolution(patchData.QIn[patchIndex], QInEnumerator, patchIndex, volumeIndex(x, y, z), unknown, patchData.QOut[patchIndex], QOutEnumerator);
            }
          }
        }
      }
#endif
    }

    // ====================================================
    // Compute damping due to max eigenvalue
    // ====================================================
#if Dimensions == 2
    for (int shift = 0; shift < 2; shift++) {
      for (int x = -HaloSize + shift; x < NumberOfVolumesPerAxisInPatch + HaloSize - 1; x += 2) {
#pragma omp simd
        for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
          double maxEigenvalueL __attribute__((aligned(AlignmentOnHeap)));
          double maxEigenvalueR __attribute__((aligned(AlignmentOnHeap)));
          loopbodies::computeMaxEigenvalue<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            0, // normal
            &maxEigenvalueL,
            singleVolumeEnumerator
          );
          loopbodies::computeMaxEigenvalue<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x + 1, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            0, // normal
            &maxEigenvalueR,
            singleVolumeEnumerator
          );
          for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
            loopbodies::updateSolutionWithEigenvalueDamping(
              patchData.QIn[patchIndex],
              QInEnumerator,
              maxEigenvalueL,
              maxEigenvalueR,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              unknown,
              patchData.dt[patchIndex],
              0, // normal
              patchData.QOut[patchIndex],
              QOutEnumerator
            );
          }
        }
      }
    }

    for (int shift = 0; shift < 2; shift++) {
      for (int y = -HaloSize + shift; y < NumberOfVolumesPerAxisInPatch + HaloSize - 1; y += 2) {
#pragma omp simd
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          double maxEigenvalueL __attribute__((aligned(AlignmentOnHeap)));
          double maxEigenvalueR __attribute__((aligned(AlignmentOnHeap)));
          loopbodies::computeMaxEigenvalue<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            1, // normal
            &maxEigenvalueL,
            singleVolumeEnumerator
          );
          loopbodies::computeMaxEigenvalue<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y + 1),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            1, // normal
            &maxEigenvalueR,
            singleVolumeEnumerator
          );
          for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
            loopbodies::updateSolutionWithEigenvalueDamping(
              patchData.QIn[patchIndex],
              QInEnumerator,
              maxEigenvalueL,
              maxEigenvalueR,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              unknown,
              patchData.dt[patchIndex],
              1, // normal
              patchData.QOut[patchIndex],
              QOutEnumerator
            );
          }
        }
      }
    }
#else
    for (int shift = 0; shift < 2; shift++) {
      for (int x = -HaloSize + shift; x < NumberOfVolumesPerAxisInPatch + HaloSize - 1; x += 2) {
#pragma omp simd collapse(2)
        for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
          for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
            double maxEigenvalueL __attribute__((aligned(AlignmentOnHeap)));
            double maxEigenvalueR __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeMaxEigenvalue<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y, z),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              0, // normal
              &maxEigenvalueL,
              singleVolumeEnumerator
            );
            loopbodies::computeMaxEigenvalue<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x + 1, y, z),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              0, // normal
              &maxEigenvalueR,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithEigenvalueDamping(
                patchData.QIn[patchIndex],
                QInEnumerator,
                maxEigenvalueL,
                maxEigenvalueR,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                unknown,
                patchData.dt[patchIndex],
                0, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }
    }

    for (int shift = 0; shift < 2; shift++) {
      for (int y = -HaloSize + shift; y < NumberOfVolumesPerAxisInPatch + HaloSize - 1; y += 2) {
#pragma omp simd collapse(2)
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
            double maxEigenvalueL __attribute__((aligned(AlignmentOnHeap)));
            double maxEigenvalueR __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeMaxEigenvalue<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y, z),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              1, // normal
              &maxEigenvalueL,
              singleVolumeEnumerator
            );
            loopbodies::computeMaxEigenvalue<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y + 1, z),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              1, // normal
              &maxEigenvalueR,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithEigenvalueDamping(
                patchData.QIn[patchIndex],
                QInEnumerator,
                maxEigenvalueL,
                maxEigenvalueR,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                unknown,
                patchData.dt[patchIndex],
                1, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }
    }

    for (int shift = 0; shift < 2; shift++) {
      for (int z = -HaloSize + shift; z < NumberOfVolumesPerAxisInPatch + HaloSize - 1; z += 2) {
#pragma omp simd collapse(2)
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
            double maxEigenvalueL __attribute__((aligned(AlignmentOnHeap)));
            double maxEigenvalueR __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeMaxEigenvalue<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y, z),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              2, // normal
              &maxEigenvalueL,
              singleVolumeEnumerator
            );
            loopbodies::computeMaxEigenvalue<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y, z + 1),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              2, // normal
              &maxEigenvalueR,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithEigenvalueDamping(
                patchData.QIn[patchIndex],
                QInEnumerator,
                maxEigenvalueL,
                maxEigenvalueR,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                unknown,
                patchData.dt[patchIndex],
                2, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }
    }
#endif

    // ====================================================
    // Normal (conservative) flux
    // ====================================================
    if constexpr (EvaluateFlux) {
#if Dimensions == 2
      for (int shift = 0; shift < 2; shift++) {
        for (int x = -HaloSize + shift; x < NumberOfVolumesPerAxisInPatch + HaloSize - 1; x += 2) {
#pragma omp simd
          for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
            double fluxFL[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
            double fluxFR[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeFlux<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              0, // normal
              fluxFL,
              singleVolumeEnumerator
            );
            loopbodies::computeFlux<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x + 1, y),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              0, // normal
              fluxFR,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithFlux(
                fluxFL,
                fluxFR,
                singleVolumeEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                unknown,
                patchData.dt[patchIndex],
                0, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }

      for (int shift = 0; shift < 2; shift++) {
        for (int y = -HaloSize + shift; y < NumberOfVolumesPerAxisInPatch + HaloSize - 1; y += 2) {
#pragma omp simd
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            double fluxFL[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
            double fluxFR[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeFlux<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              1, // normal
              fluxFL,
              singleVolumeEnumerator
            );
            loopbodies::computeFlux<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y + 1),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              1, // normal
              fluxFR,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithFlux(
                fluxFL,
                fluxFR,
                singleVolumeEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                unknown,
                patchData.dt[patchIndex],
                1, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }
#else
      for (int shift = 0; shift < 2; shift++) {
        for (int x = HaloSize + shift; x < NumberOfVolumesPerAxisInPatch + HaloSize - 1; x += 2) {
#pragma omp simd collapse(2)
          for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
            for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
              double fluxFL[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              double fluxFR[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              loopbodies::computeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                0, // normal
                fluxFL,
                singleVolumeEnumerator
              );
              loopbodies::computeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x + 1, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                0, // normal
                fluxFR,
                singleVolumeEnumerator
              );
              for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
                loopbodies::updateSolutionWithFlux(
                  fluxFL,
                  fluxFR,
                  singleVolumeEnumerator,
                  patchData.cellCentre[patchIndex],
                  patchData.cellSize[patchIndex],
                  patchIndex,
                  volumeIndex(x, y, z),
                  unknown,
                  patchData.dt[patchIndex],
                  0, // normal
                  patchData.QOut[patchIndex],
                  QOutEnumerator
                );
              }
            }
          }
        }
      }

      for (int shift = 0; shift < 2; shift++) {
        for (int y = -HaloSize + shift; y < NumberOfVolumesPerAxisInPatch + HaloSize - 1; y += 2) {
#pragma omp simd collapse(2)
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
              double fluxFL[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              double fluxFR[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              loopbodies::computeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                1, // normal
                fluxFL,
                singleVolumeEnumerator
              );
              loopbodies::computeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y + 1, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                1, // normal
                fluxFR,
                singleVolumeEnumerator
              );
              for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
                loopbodies::updateSolutionWithFlux(
                  fluxFL,
                  fluxFR,
                  singleVolumeEnumerator,
                  patchData.cellCentre[patchIndex],
                  patchData.cellSize[patchIndex],
                  patchIndex,
                  volumeIndex(x, y, z),
                  unknown,
                  patchData.dt[patchIndex],
                  1, // normal
                  patchData.QOut[patchIndex],
                  QOutEnumerator
                );
              }
            }
          }
        }
      }

      for (int shift = 0; shift < 2; shift++) {
        for (int z = -HaloSize + shift; z < NumberOfVolumesPerAxisInPatch + HaloSize - 1; z += 2) {
#pragma omp simd collapse(2)
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
              double fluxFL[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              double fluxFR[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              loopbodies::computeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                2, // normal
                fluxFL,
                singleVolumeEnumerator
              );
              loopbodies::computeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z + 1),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                2, // normal
                fluxFR,
                singleVolumeEnumerator
              );
              for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
                loopbodies::updateSolutionWithFlux(
                  fluxFL,
                  fluxFR,
                  singleVolumeEnumerator,
                  patchData.cellCentre[patchIndex],
                  patchData.cellSize[patchIndex],
                  patchIndex,
                  volumeIndex(x, y, z),
                  unknown,
                  patchData.dt[patchIndex],
                  2, // normal
                  patchData.QOut[patchIndex],
                  QOutEnumerator
                );
              }
            }
          }
        }
      }
#endif
    }

    if constexpr (EvaluateNonconservativeProduct) {
#if Dimensions == 2
      for (int shift = 0; shift < 2; shift++) {
        for (int x = -HaloSize + shift; x < NumberOfVolumesPerAxisInPatch + HaloSize - 1; x += 2) {
#pragma omp simd
          for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
            double fluxNCP[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeNonconservativeFlux<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              0, // normal
              fluxNCP,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithNonconservativeFlux(
                fluxNCP,
                singleVolumeEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                unknown,
                patchData.dt[patchIndex],
                0, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }

      for (int shift = 0; shift < 2; shift++) {
        for (int y = -HaloSize + shift; y < NumberOfVolumesPerAxisInPatch + HaloSize - 1; y += 2) {
#pragma omp simd
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            double fluxNCP[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
            loopbodies::computeNonconservativeFlux<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              1, // normal
              fluxNCP,
              singleVolumeEnumerator
            );
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithNonconservativeFlux(
                fluxNCP,
                singleVolumeEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                unknown,
                patchData.dt[patchIndex],
                1, // normal
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }
      }
#else
      for (int shift = 0; shift < 2; shift++) {
        for (int x = -HaloSize + shift; x < NumberOfVolumesPerAxisInPatch + HaloSize - 1; x += 2) {
#pragma omp simd collapse(2)
          for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
            for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
              double fluxNCP[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              loopbodies::computeNonconservativeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                0, // normal
                fluxNCP,
                singleVolumeEnumerator
              );
              for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
                loopbodies::updateSolutionWithNonconservativeFlux(
                  fluxNCP,
                  singleVolumeEnumerator,
                  patchData.cellCentre[patchIndex],
                  patchData.cellSize[patchIndex],
                  patchIndex,
                  volumeIndex(x, y, z),
                  unknown,
                  patchData.dt[patchIndex],
                  0, // normal
                  patchData.QOut[patchIndex],
                  QOutEnumerator
                );
              }
            }
          }
        }
      }

      for (int shift = 0; shift < 2; shift++) {
        for (int y = -HaloSize + shift; y < NumberOfVolumesPerAxisInPatch + HaloSize - 1; y += 2) {
#pragma omp simd collapse(2)
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
              double fluxNCP[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              loopbodies::computeNonconservativeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                1, // normal
                fluxNCP,
                singleVolumeEnumerator
              );
              for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
                loopbodies::updateSolutionWithNonconservativeFlux(
                  fluxNCP,
                  singleVolumeEnumerator,
                  patchData.cellCentre[patchIndex],
                  patchData.cellSize[patchIndex],
                  patchIndex,
                  volumeIndex(x, y, z),
                  unknown,
                  patchData.dt[patchIndex],
                  1, // normal
                  patchData.QOut[patchIndex],
                  QOutEnumerator
                );
              }
            }
          }
        }
      }

      for (int shift = 0; shift < 2; shift++) {
        for (int z = -HaloSize + shift; z < NumberOfVolumesPerAxisInPatch + HaloSize - 1; z += 2) {
#pragma omp simd collapse(2)
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
              double fluxNCP[NumberOfUnknowns] __attribute__((aligned(AlignmentOnHeap)));
              loopbodies::computeNonconservativeFlux<SolverType>(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex],
                2, // normal
                fluxNCP,
                singleVolumeEnumerator
              );
              for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
                loopbodies::updateSolutionWithNonconservativeFlux(
                  fluxNCP,
                  singleVolumeEnumerator,
                  patchData.cellCentre[patchIndex],
                  patchData.cellSize[patchIndex],
                  patchIndex,
                  volumeIndex(x, y, z),
                  unknown,
                  patchData.dt[patchIndex],
                  2, // normal
                  patchData.QOut[patchIndex],
                  QOutEnumerator
                );
              }
            }
          }
        }
      }
#endif
    }

    if constexpr (EvaluateMaximumEigenvalueAfterTimeStep) {
      double newMaxEigenvalue = 0.0;
#if Dimensions == 2
#pragma omp simd collapse(2) reduction(max : newMaxEigenvalue)
      for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          newMaxEigenvalue = std::max(
            newMaxEigenvalue,
            loopbodies::reduceMaxEigenvalue<SolverType>(
              patchData.QOut[patchIndex],
              QOutEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              patchData.t[patchIndex],
              patchData.dt[patchIndex]
            )
          );
        }
      }
#else
#pragma omp simd collapse(3) reduction(max : newMaxEigenvalue)
      for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
        for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
          for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
            newMaxEigenvalue = std::max(
              newMaxEigenvalue,
              loopbodies::reduceMaxEigenvalue<SolverType>(
                patchData.QOut[patchIndex],
                QOutEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex]
              )
            );
          }
        }
      }
#endif
      patchData.maxEigenvalue[patchIndex] = newMaxEigenvalue;
    }
  }

  logTraceOut("timeStepWithRusanovPatchwiseInsituStateless()");
}


template <
  class SolverType,
  int  NumberOfVolumesPerAxisInPatch,
  int  HaloSize,
  int  NumberOfUnknowns,
  int  NumberOfAuxiliaryVariables,
  bool EvaluateFlux,
  bool EvaluateNonconservativeProduct,
  bool EvaluateSource,
  bool EvaluateMaximumEigenvalueAfterTimeStep>
void exahype2::fv::rusanov::timeStepWithRusanovPatchwiseInsituStateless(
  CellData& patchData, tarch::timing::Measurement& measurement, peano4::utils::LoopPlacement loopParallelism
) {
  tarch::timing::Watch watch("exahype2::fv::rusanov", "timeStepWithRusanovPatchwiseInsituStateless", false, true);
  timeStepWithRusanovPatchwiseInsituStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep>(patchData, loopParallelism);
  watch.stop();
  measurement.setValue(watch.getCalendarTime());
}
