// This file is part of the ExaHyPE2 project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org

template <
  class SolverType,
  int  NumberOfVolumesPerAxisInPatch,
  int  HaloSize,
  int  NumberOfUnknowns,
  int  NumberOfAuxiliaryVariables,
  bool EvaluateFlux,
  bool EvaluateNonconservativeProduct,
  bool EvaluateSource,
  bool EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::omp::timeStepWithRusanovVolumewiseStateless(int targetDevice, CellData& patchData) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::omp");
  logTraceIn("timeStepWithRusanovVolumewiseStateless()");

#ifdef UseTargetDART
  targetDevice = TARGETDART_ANY;
#endif

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const TempDataEnumeratorType                 fluxEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, 0);
  const TempDataEnumeratorType                 eigenvalueEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, 1, 0);
  const TempDataEnumeratorType                 ncpEnumerator(1, NumberOfVolumesPerAxisInPatch + 1, HaloSize, NumberOfUnknowns, 0);

  alignas(AlignmentOnHeap) double tempFluxX[fluxEnumerator.size()];
  alignas(AlignmentOnHeap) double tempFluxY[fluxEnumerator.size()];
  alignas(AlignmentOnHeap) double tempFluxZ[fluxEnumerator.size()];
  alignas(AlignmentOnHeap) double tempEigenvalueX[eigenvalueEnumerator.size()];
  alignas(AlignmentOnHeap) double tempEigenvalueY[eigenvalueEnumerator.size()];
  alignas(AlignmentOnHeap) double tempEigenvalueZ[eigenvalueEnumerator.size()];
  alignas(AlignmentOnHeap) double tempNonconservativeProductX[ncpEnumerator.size()];
  alignas(AlignmentOnHeap) double tempNonconservativeProductY[ncpEnumerator.size()];
  alignas(AlignmentOnHeap) double tempNonconservativeProductZ[ncpEnumerator.size()];

  const int     numberOfCells          = patchData.numberOfCells;
  const double* rawPointerToCellCentre = patchData.cellCentre[0].data();
  const double* rawPointerToCellSize   = patchData.cellSize[0].data();
  const double* t                      = patchData.t;
  const double* dt                     = patchData.dt;
  double*       maxEigenvalue          = patchData.maxEigenvalue;
  double        newMaxEigenvalue       = 0.0;
  double*       mappedPointersToQOut   = new double[numberOfCells * QOutEnumerator.size()];
  double*       mappedPointersToQIn    = new double[numberOfCells * QInEnumerator.size()];
  for (int patchIndex = 0; patchIndex < numberOfCells; patchIndex++) {
    std::memcpy(&mappedPointersToQIn[patchIndex * QInEnumerator.size()], patchData.QIn[patchIndex], QInEnumerator.size() * sizeof(double));
  }

  // clang-format off
#pragma omp target teams distribute device(targetDevice) \
  map(to : \
    tempFluxX[0 : fluxEnumerator.size()], \
    tempFluxY[0 : fluxEnumerator.size()], \
    tempFluxZ[0 : fluxEnumerator.size()], \
    tempEigenvalueX[0 : eigenvalueEnumerator.size()], \
    tempEigenvalueY[0 : eigenvalueEnumerator.size()], \
    tempEigenvalueZ[0 : eigenvalueEnumerator.size()], \
    tempNonconservativeProductX[0 : ncpEnumerator.size()], \
    tempNonconservativeProductY[0 : ncpEnumerator.size()], \
    tempNonconservativeProductZ[0 : ncpEnumerator.size()], \
    rawPointerToCellCentre[0 : numberOfCells * Dimensions], \
    rawPointerToCellSize[0 : numberOfCells * Dimensions], \
    t[0 : numberOfCells], \
    dt[0 : numberOfCells], \
    mappedPointersToQIn[0 : numberOfCells * QInEnumerator.size()]) \
  map(from : \
    maxEigenvalue[0 : numberOfCells], \
    mappedPointersToQOut[0 : numberOfCells * QOutEnumerator.size()])
  // clang-format on
  for (int patchIndex = 0; patchIndex < numberOfCells; patchIndex++) {
#pragma omp parallel for simd collapse(Dimensions) reduction(max : newMaxEigenvalue) schedule(static, 1)
#if Dimensions == 3
    for (int z = 0; z < NumberOfVolumesPerAxisInPatch; z++) {
#endif
      for (int y = 0; y < NumberOfVolumesPerAxisInPatch; y++) {
        for (int x = 0; x < NumberOfVolumesPerAxisInPatch; x++) {
          const auto currentVolume = volumeIndex(
            x,
            y
#if Dimensions == 3
            ,
            z
#endif
          );

          // ====================================================
          // Copy solution over and evaluate source (if required)
          // ====================================================
          if constexpr (EvaluateSource) {
            loopbodies::copySolutionAndAddSourceTerm<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              currentVolume,
              t[patchIndex],
              dt[patchIndex],
              &mappedPointersToQOut[patchIndex * QOutEnumerator.size()],
              QOutEnumerator
            );
          } else {
#pragma unroll
            for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
              loopbodies::copySolution(
                &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
                QInEnumerator,
                patchIndex,
                currentVolume,
                unknown,
                &mappedPointersToQOut[patchIndex * QOutEnumerator.size()],
                QOutEnumerator
              );
            }
          }

          // ====================================================
          // Compute damping due to max eigenvalue
          // ====================================================
          auto volumeWithHalo = currentVolume;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            0, // normal
            tempEigenvalueX,
            eigenvalueEnumerator
          );
          volumeWithHalo(0) = x - HaloSize;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            0, // normal
            tempEigenvalueX,
            eigenvalueEnumerator
          );
          volumeWithHalo(0) = x + HaloSize;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            0, // normal
            tempEigenvalueX,
            eigenvalueEnumerator
          );

          volumeWithHalo = currentVolume;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            1, // normal
            tempEigenvalueY,
            eigenvalueEnumerator
          );
          volumeWithHalo(1) = y - HaloSize;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            1, // normal
            tempEigenvalueY,
            eigenvalueEnumerator
          );
          volumeWithHalo(1) = y + HaloSize;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            1, // normal
            tempEigenvalueY,
            eigenvalueEnumerator
          );

#if Dimensions == 3
          volumeWithHalo = currentVolume;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            2, // normal
            tempEigenvalueZ,
            eigenvalueEnumerator
          );
          volumeWithHalo(2) = z - HaloSize;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            2, // normal
            tempEigenvalueZ,
            eigenvalueEnumerator
          );
          volumeWithHalo(2) = z + HaloSize;
          loopbodies::computeMaxEigenvalue<SolverType>(
            &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
            QInEnumerator,
            rawPointerToCellCentre[patchIndex],
            rawPointerToCellSize[patchIndex],
            patchIndex,
            volumeWithHalo,
            t[patchIndex],
            dt[patchIndex],
            2, // normal
            tempEigenvalueZ,
            eigenvalueEnumerator
          );
#endif

#pragma unroll
          for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
            loopbodies::updateSolutionWithEigenvalueDamping(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              tempEigenvalueX,
              tempEigenvalueY,
              tempEigenvalueZ,
              eigenvalueEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              currentVolume,
              unknown,
              dt[patchIndex],
              &mappedPointersToQOut[patchIndex * QOutEnumerator.size()],
              QOutEnumerator
            );
          }

          // ====================================================
          // Normal (conservative) flux
          // ====================================================
          if constexpr (EvaluateFlux) {
            auto volumeWithHalo = currentVolume;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              0, // normal
              tempFluxX,
              fluxEnumerator
            );
            volumeWithHalo(0) = x - HaloSize;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              0, // normal
              tempFluxX,
              fluxEnumerator
            );
            volumeWithHalo(0) = x + HaloSize;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              0, // normal
              tempFluxX,
              fluxEnumerator
            );

            volumeWithHalo = currentVolume;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              1, // normal
              tempFluxY,
              fluxEnumerator
            );
            volumeWithHalo(1) = y - HaloSize;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              1, // normal
              tempFluxY,
              fluxEnumerator
            );
            volumeWithHalo(1) = y + HaloSize;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              1, // normal
              tempFluxY,
              fluxEnumerator
            );

#if Dimensions == 3
            volumeWithHalo = currentVolume;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              2, // normal
              tempFluxZ,
              fluxEnumerator
            );
            volumeWithHalo(2) = z - HaloSize;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              2, // normal
              tempFluxZ,
              fluxEnumerator
            );
            volumeWithHalo(2) = z + HaloSize;
            loopbodies::computeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              2, // normal
              tempFluxZ,
              fluxEnumerator
            );
#endif

#pragma unroll
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithFlux(
                tempFluxX,
                tempFluxY,
                tempFluxZ,
                fluxEnumerator,
                rawPointerToCellCentre[patchIndex],
                rawPointerToCellSize[patchIndex],
                patchIndex,
                currentVolume,
                unknown,
                dt[patchIndex],
                &mappedPointersToQOut[patchIndex * QOutEnumerator.size()],
                QOutEnumerator
              );
            }
          }

          if constexpr (EvaluateNonconservativeProduct) {
            auto volumeWithHalo = currentVolume;
            loopbodies::computeNonconservativeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              0, // normal
              tempNonconservativeProductX,
              ncpEnumerator
            );
            volumeWithHalo(0) = x - HaloSize;
            loopbodies::computeNonconservativeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              0, // normal
              tempNonconservativeProductX,
              ncpEnumerator
            );

            volumeWithHalo = currentVolume;
            loopbodies::computeNonconservativeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              1, // normal
              tempNonconservativeProductY,
              ncpEnumerator
            );
            volumeWithHalo(1) = y - HaloSize;
            loopbodies::computeNonconservativeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              1, // normal
              tempNonconservativeProductY,
              ncpEnumerator
            );

#if Dimensions == 3
            volumeWithHalo = currentVolume;
            loopbodies::computeNonconservativeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              2, // normal
              tempNonconservativeProductZ,
              ncpEnumerator
            );
            volumeWithHalo(2) = z - HaloSize;
            loopbodies::computeNonconservativeFlux<SolverType>(
              &mappedPointersToQIn[patchIndex * QInEnumerator.size()],
              QInEnumerator,
              rawPointerToCellCentre[patchIndex],
              rawPointerToCellSize[patchIndex],
              patchIndex,
              volumeWithHalo,
              t[patchIndex],
              dt[patchIndex],
              2, // normal
              tempNonconservativeProductZ,
              ncpEnumerator
            );
#endif

#pragma unroll
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithNonconservativeFlux(
                tempNonconservativeProductX,
                tempNonconservativeProductY,
                tempNonconservativeProductZ,
                ncpEnumerator,
                rawPointerToCellCentre[patchIndex],
                rawPointerToCellSize[patchIndex],
                patchIndex,
                currentVolume,
                unknown,
                dt[patchIndex],
                &mappedPointersToQOut[patchIndex * QOutEnumerator.size()],
                QOutEnumerator
              );
            }
          }

          if constexpr (EvaluateMaximumEigenvalueAfterTimeStep) {
            newMaxEigenvalue = std::max(
              newMaxEigenvalue,
              loopbodies::reduceMaxEigenvalue<SolverType>(
                &mappedPointersToQOut[patchIndex * QOutEnumerator.size()],
                QOutEnumerator,
                rawPointerToCellCentre[patchIndex],
                rawPointerToCellSize[patchIndex],
                patchIndex,
                currentVolume,
                t[patchIndex],
                dt[patchIndex]
              )
            );
          }
        }
      }
#if Dimensions == 3
    }
#endif
    maxEigenvalue[patchIndex] = newMaxEigenvalue;
  }

  for (int patchIndex = 0; patchIndex < numberOfCells; patchIndex++) {
    std::memcpy(patchData.QOut[patchIndex], &mappedPointersToQOut[patchIndex * QOutEnumerator.size()], QOutEnumerator.size() * sizeof(double));
  }

  delete[] mappedPointersToQIn;
  delete[] mappedPointersToQOut;

  logTraceOut("timeStepWithRusanovVolumewiseStateless()");
}


template <
  class SolverType,
  int  NumberOfVolumesPerAxisInPatch,
  int  HaloSize,
  int  NumberOfUnknowns,
  int  NumberOfAuxiliaryVariables,
  bool EvaluateFlux,
  bool EvaluateNonconservativeProduct,
  bool EvaluateSource,
  bool EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::omp::timeStepWithRusanovVolumewiseStateless(int targetDevice, CellData& patchData, tarch::timing::Measurement& measurement) {
  tarch::timing::Watch watch("exahype2::fv::rusanov::omp", "timeStepWithRusanovVolumewiseStateless", false, true);
  timeStepWithRusanovVolumewiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, patchData);
  watch.stop();
  measurement.setValue(watch.getCalendarTime());
}
