// This file is part of the ExaHyPE2 project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org

namespace exahype2::fv::rusanov::omp::internal {
  template <
    class SolverType,
    int  NumberOfVolumesPerAxisInPatch,
    int  HaloSize,
    int  NumberOfUnknowns,
    int  NumberOfAuxiliaryVariables,
    bool EvaluateFlux,
    bool EvaluateNonconservativeProduct,
    bool EvaluateSource,
    bool EvaluateMaximumEigenvalueAfterTimeStep,
    class TempDataEnumeratorType,
    int IterationsPerTransfer
>
  KeywordToAvoidDuplicateSymbolsForInlinedFunctions void timeStepWithRusanovPatchwiseStatelessAllPacked(
    int           targetDevice,
    int           numberOfCells,
    PackedDouble**      mappedPointersToQInPacked,
    const PackedDouble* rawPointerToCellCentrePacked,
    const PackedDouble* rawPointerToCellSizePacked,
    const PackedDouble* tPacked,
    const PackedDouble* dtPacked,
    PackedDouble*       maxEigenvaluePacked,
    PackedDouble**      mappedPointersToQOutPacked,
    double*       tempFluxX,
    double*       tempFluxY,
    double*       tempFluxZ,
    double*       tempNonconservativeProductX,
    double*       tempNonconservativeProductY,
    double*       tempNonconservativeProductZ,
    double*       tempEigenvalueX,
    double*       tempEigenvalueY,
    double*       tempEigenvalueZ
  ) InlineMethod {
    const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
    const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
    const TempDataEnumeratorType                 fluxEnumerator(numberOfCells, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, 0);
    const TempDataEnumeratorType                 ncpEnumerator(numberOfCells, NumberOfVolumesPerAxisInPatch + 1, HaloSize, NumberOfUnknowns, 0);
    const TempDataEnumeratorType                 eigenvalueEnumerator(numberOfCells, NumberOfVolumesPerAxisInPatch, HaloSize, 1, 0);


    // alloc buffers for output data
    double*  maxEigenvalue = (double*)omp_target_alloc(numberOfCells * sizeof(double), targetDevice);
    double** mappedPointersToQOut = new double*[numberOfCells];
    for (int i = 0; i < numberOfCells; ++i) {
        mappedPointersToQOut[i] = (double*)omp_target_alloc(QOutEnumerator.size() * sizeof(double), targetDevice);
    }

    // alloc buffers 
    double** mappedPointersToQIn = new double*[numberOfCells];
    for (int i = 0; i < numberOfCells; ++i) {
        mappedPointersToQIn[i] = (double*)omp_target_alloc(QInEnumerator.size() * sizeof(double), targetDevice);
    }
#pragma omp target enter data map(to: mappedPointersToQIn[0: numberOfCells]) device(targetDevice)
#pragma omp target enter data map(to: mappedPointersToQOut[0: numberOfCells])

    double*  rawPointerToCellCentre = (double*)omp_target_alloc(Dimensions * numberOfCells * sizeof(double), targetDevice);
    double*  rawPointerToCellSize = (double*)omp_target_alloc(Dimensions * numberOfCells * sizeof(double), targetDevice);
    double*  t = (double*)omp_target_alloc(numberOfCells * sizeof(double), targetDevice);
    double*  dt = (double*)omp_target_alloc(numberOfCells * sizeof(double), targetDevice);
    // convert to double
    #pragma omp target teams distribute parallel for simd device(targetDevice) collapse(2) firstprivate(QInEnumerator)
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        for (int i = 0; i < QInEnumerator.size(); ++i) {
            mappedPointersToQIn[patchIndex][i] = mappedPointersToQInPacked[patchIndex][i]._d;
        }
    }
    #pragma omp target distribute parallel for simd device(targetDevice) 
    for (int i = 0; i < Dimensions * numberOfCells; ++i) {
        rawPointerToCellCentre[i] = rawPointerToCellCentrePacked[i]._d;
        rawPointerToCellSize[i] = rawPointerToCellSizePacked[i]._d;
    }
    #pragma omp target distribute parallel for simd  device(targetDevice)
    for (int i = 0; i < numberOfCells; ++i) {
        t[i] = tPacked[i]._d;
        dt[i] = dtPacked[i]._d;
    }
    // #pragma omp target teams device(targetDevice)
    // {
    //     #pragma omp distribute parallel for simd
    //     for (int i = 0; i < Dimensions * numberOfCells; ++i) {
    //         rawPointerToCellCentre[i] = rawPointerToCellCentrePacked[i]._d;
    //         rawPointerToCellSize[i] = rawPointerToCellSizePacked[i]._d;
    //     }
    //     #pragma omp distribute parallel for simd 
    //     for (int i = 0; i < numberOfCells; ++i) {
    //         t[i] = tPacked[i]._d;
    //         dt[i] = dtPacked[i]._d;
    //     }
    // }


// //         // debug
// // #pragma omp target device(targetDevice)
// //             for (int i = 0; i < 1; ++i) {
// //                 // std::printf("%f\n", maxEigenvalue[i]);
// //                 // std::printf("%f\n", t[i]);
// //                 std::printf("%f\n", tPacked[i]._d);
// //                 for (int j = 0; j < 5; ++j)
// //                     // std::printf("%f\n", mappedPointersToQOut[i][j]);
// //                     // std::printf("%f\n", mappedPointersToQIn[i][j]);
// //                     std::printf("%f\n", mappedPointersToQInPacked[i][j]._d);
// //                 std::printf("\n");
// //             }
// //
//         // debug
// #pragma omp target device(targetDevice)
//             for (int i = 0; i < 1; ++i) {
//                 // std::printf("%f\n", maxEigenvalue[i]);
//                 std::printf("%f\n", t[i]);
//                 // std::printf("%f\n", tPacked[i]._d);
//                 for (int j = 0; j < 5; ++j)
//                     // std::printf("%f\n", mappedPointersToQOut[i][j]);
//                     std::printf("%f\n", mappedPointersToQIn[i][j]);
//                     // std::printf("%f\n", mappedPointersToQInPacked[i][j]._d);
//                 std::printf("\n");
            // }

    for (int i = 0; i < IterationsPerTransfer; ++i) {

        ::exahype2::fv::rusanov::omp::internal::timeStepWithRusanovPatchwiseStateless<
            SolverType,
            NumberOfVolumesPerAxisInPatch,
            HaloSize,
            NumberOfUnknowns,
            NumberOfAuxiliaryVariables,
            EvaluateFlux,
            EvaluateNonconservativeProduct,
            EvaluateSource,
            EvaluateMaximumEigenvalueAfterTimeStep,
            TempDataEnumeratorType>(
                targetDevice,
                numberOfCells,
                mappedPointersToQIn,
                rawPointerToCellCentre,
                rawPointerToCellSize,
                t,
                dt,
                maxEigenvalue,
                mappedPointersToQOut,
                tempFluxX,
                tempFluxY,
                tempFluxZ,
                tempNonconservativeProductX,
                tempNonconservativeProductY,
                tempNonconservativeProductZ,
                tempEigenvalueX,
                tempEigenvalueY,
                tempEigenvalueZ
            );

//     // debug
// #pragma omp target device(targetDevice)
//             for (int i = 0; i < 1; ++i) {
//                 std::printf("%f\n", maxEigenvalue[i]);
//                 for (int j = 0; j < 5; ++j)
//                     std::printf("%f\n", mappedPointersToQOut[i][j]);
//                 std::printf("\n");
//             }
    }

    
    // convert to PackedDouble
    #pragma omp target teams distribute parallel for simd collapse(2) firstprivate(QOutEnumerator)
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        for (int i = 0; i < QOutEnumerator.size(); ++i) {
            mappedPointersToQOutPacked[patchIndex][i]._d = mappedPointersToQOut[patchIndex][i];
        }
    }

    #pragma omp target teams distribute parallel for simd
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        maxEigenvaluePacked[patchIndex]._d = maxEigenvalue[patchIndex];
    }
    

    // release buffers
    #pragma omp target exit data map(delete: mappedPointersToQIn[0: numberOfCells])
    #pragma omp target exit data map(delete: mappedPointersToQOut[0: numberOfCells])


    omp_target_free(rawPointerToCellCentre, targetDevice);
    omp_target_free(rawPointerToCellSize, targetDevice);
    omp_target_free(t, targetDevice);
    omp_target_free(dt, targetDevice);
    omp_target_free(maxEigenvalue, targetDevice);

    for (int i = 0; i < numberOfCells; ++i) {
        omp_target_free(mappedPointersToQIn[i], targetDevice);
        omp_target_free(mappedPointersToQOut[i], targetDevice);
    }

    delete[] mappedPointersToQIn;
    delete[] mappedPointersToQOut;


  }
} // namespace exahype2::fv::rusanov::omp::internal


 
template <
  class SolverType,
  int  NumberOfVolumesPerAxisInPatch,
  int  HaloSize,
  int  NumberOfUnknowns,
  int  NumberOfAuxiliaryVariables,
  bool EvaluateFlux,
  bool EvaluateNonconservativeProduct,
  bool EvaluateSource,
  bool EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType,
  int IterationsPerTransfer
>
void exahype2::fv::rusanov::omp::timeStepWithRusanovPatchwiseHeapStatelessAllPacked(int targetDevice, CellData& patchData) {
    const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
    const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
    const TempDataEnumeratorType                 fluxEnumerator(patchData.numberOfCells, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, 0);
    const TempDataEnumeratorType                 ncpEnumerator(patchData.numberOfCells, NumberOfVolumesPerAxisInPatch + 1, HaloSize, NumberOfUnknowns, 0);
    const TempDataEnumeratorType                 eigenvalueEnumerator(patchData.numberOfCells, NumberOfVolumesPerAxisInPatch, HaloSize, 1, 0);
  
    // ------------------------ temp buffers
    double* tempFluxX                   = new double[fluxEnumerator.size()];
    double* tempFluxY                   = new double[fluxEnumerator.size()];
    double* tempFluxZ                   = new double[fluxEnumerator.size()];
    double* tempNonconservativeProductX = new double[ncpEnumerator.size()];
    double* tempNonconservativeProductY = new double[ncpEnumerator.size()];
    double* tempNonconservativeProductZ = new double[ncpEnumerator.size()];
    double* tempEigenvalueX             = new double[eigenvalueEnumerator.size()];
    double* tempEigenvalueY             = new double[eigenvalueEnumerator.size()];
    double* tempEigenvalueZ             = new double[eigenvalueEnumerator.size()];

    // ========================= Compress data 
    const int numberOfCells = patchData.numberOfCells;
    // still do not know if there is a problem here to convert to void**
    PackedDouble** QInPacked = (PackedDouble**)(new PackedDouble*[numberOfCells]);
    PackedDouble** QOutPacked = (PackedDouble**)(new PackedDouble*[numberOfCells]);

    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        const double* currentQIn = patchData.QIn[patchIndex];
        QInPacked[patchIndex] = new PackedDouble[QInEnumerator.size()];
        internal::copy(QInPacked[patchIndex], currentQIn, QInEnumerator.size());

        QOutPacked[patchIndex] =  new PackedDouble[QOutEnumerator.size()];
    }

    PackedDouble* rawPointerToCellCentrePacked = new PackedDouble[Dimensions * numberOfCells];
    PackedDouble* rawPointerToCellSizePacked = new PackedDouble[Dimensions * numberOfCells];
    PackedDouble* tPacked = new PackedDouble[numberOfCells];
    PackedDouble* dtPacked = new PackedDouble[numberOfCells];                     
    PackedDouble* maxEigenvaluePacked = new PackedDouble[numberOfCells];
    internal::copy(rawPointerToCellCentrePacked, patchData.cellCentre[0].data(), Dimensions * numberOfCells);
    internal::copy(rawPointerToCellSizePacked, patchData.cellSize[0].data(), Dimensions * numberOfCells);
    internal::copy(tPacked, patchData.t, numberOfCells);
    internal::copy(dtPacked, patchData.dt, numberOfCells);
    internal::copy(maxEigenvaluePacked, patchData.maxEigenvalue, numberOfCells);

    // ========================= transfer data
    PackedDouble** mappedPointersToQInPacked = (PackedDouble**)(void**)(new PackedDouble*[numberOfCells]);
    PackedDouble** mappedPointersToQOutPacked = (PackedDouble**)(void**)(new PackedDouble*[numberOfCells]);


    // alloc buffers for output data
    double*  maxEigenvalue = (double*)omp_target_alloc(numberOfCells * sizeof(double), targetDevice);
    double** mappedPointersToQOut = new double*[numberOfCells];
    for (int i = 0; i < numberOfCells; ++i) {
        mappedPointersToQOut[i] = (double*)omp_target_alloc(QOutEnumerator.size() * sizeof(double), targetDevice);
    }

    // alloc buffers 
    double** mappedPointersToQIn = new double*[numberOfCells];
    for (int i = 0; i < numberOfCells; ++i) {
        mappedPointersToQIn[i] = (double*)omp_target_alloc(QInEnumerator.size() * sizeof(double), targetDevice);
    }

    double*  rawPointerToCellCentre = (double*)omp_target_alloc(Dimensions * numberOfCells * sizeof(double), targetDevice);
    double*  rawPointerToCellSize = (double*)omp_target_alloc(Dimensions * numberOfCells * sizeof(double), targetDevice);
    double*  t = (double*)omp_target_alloc(numberOfCells * sizeof(double), targetDevice);
    double*  dt = (double*)omp_target_alloc(numberOfCells * sizeof(double), targetDevice);
    
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        const PackedDouble* currentQInPacked = QInPacked[patchIndex];
        const PackedDouble* currentQOutPacked = QOutPacked[patchIndex];

#pragma omp target enter data map(to: currentQInPacked[0: QInEnumerator.size()]) device(targetDevice)
#pragma omp target enter data map(alloc: currentQOutPacked[0: QOutEnumerator.size()]) device(targetDevice)
        mappedPointersToQInPacked[patchIndex] = (PackedDouble*)(omp_get_mapped_ptr(currentQInPacked, targetDevice));
        mappedPointersToQOutPacked[patchIndex] = (PackedDouble*)(omp_get_mapped_ptr(currentQOutPacked, targetDevice));
    }

#pragma omp target enter data map(alloc : tempFluxX[0 : fluxEnumerator.size()]) device(targetDevice) 
#pragma omp target enter data map(alloc : tempFluxY[0 : fluxEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempFluxZ[0 : fluxEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempNonconservativeProductX[0 : ncpEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempNonconservativeProductY[0 : ncpEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempNonconservativeProductZ[0 : ncpEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempEigenvalueX[0 : eigenvalueEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempEigenvalueY[0 : eigenvalueEnumerator.size()]) device(targetDevice)  
#pragma omp target enter data map(alloc : tempEigenvalueZ[0 : eigenvalueEnumerator.size()]) device(targetDevice)  

#pragma omp target enter data map(to: mappedPointersToQInPacked[0: numberOfCells]) device(targetDevice) 
#pragma omp target enter data map(to: mappedPointersToQOutPacked[0: numberOfCells]) device(targetDevice)  
#pragma omp target enter data map(to : rawPointerToCellCentrePacked[0 : numberOfCells * Dimensions]) device(targetDevice)  
#pragma omp target enter data map(to : rawPointerToCellSizePacked[0 : numberOfCells * Dimensions]) device(targetDevice)  
#pragma omp target enter data map(to : tPacked[0 : numberOfCells]) device(targetDevice)  
#pragma omp target enter data map(to : dtPacked[0 : numberOfCells]) device(targetDevice)  
#pragma omp target enter data map(alloc : maxEigenvaluePacked[0 : numberOfCells]) device(targetDevice)  

#pragma omp target enter data map(to: mappedPointersToQIn[0: numberOfCells]) device(targetDevice)  
#pragma omp target enter data map(to: mappedPointersToQOut[0: numberOfCells]) device(targetDevice)  

// #pragma omp target enter data map(alloc : tempFluxX[0 : fluxEnumerator.size()]) device(targetDevice) nowait
// #pragma omp target enter data map(alloc : tempFluxY[0 : fluxEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempFluxZ[0 : fluxEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempNonconservativeProductX[0 : ncpEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempNonconservativeProductY[0 : ncpEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempNonconservativeProductZ[0 : ncpEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempEigenvalueX[0 : eigenvalueEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempEigenvalueY[0 : eigenvalueEnumerator.size()]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : tempEigenvalueZ[0 : eigenvalueEnumerator.size()]) device(targetDevice)  nowait
//
// #pragma omp target enter data map(to: mappedPointersToQInPacked[0: numberOfCells]) device(targetDevice) nowait
// #pragma omp target enter data map(to: mappedPointersToQOutPacked[0: numberOfCells]) device(targetDevice)  nowait
// #pragma omp target enter data map(to : rawPointerToCellCentrePacked[0 : numberOfCells * Dimensions]) device(targetDevice)  nowait
// #pragma omp target enter data map(to : rawPointerToCellSizePacked[0 : numberOfCells * Dimensions]) device(targetDevice)  nowait
// #pragma omp target enter data map(to : tPacked[0 : numberOfCells]) device(targetDevice)  nowait
// #pragma omp target enter data map(to : dtPacked[0 : numberOfCells]) device(targetDevice)  nowait
// #pragma omp target enter data map(alloc : maxEigenvaluePacked[0 : numberOfCells]) device(targetDevice)  nowait
//     
// #pragma omp target enter data map(to: mappedPointersToQIn[0: numberOfCells]) device(targetDevice)  nowait
// #pragma omp target enter data map(to: mappedPointersToQOut[0: numberOfCells]) device(targetDevice)  nowait
// #pragma omp taskwait


    // convert to double on GPU
    #pragma omp target teams distribute parallel for simd device(targetDevice) collapse(2) firstprivate(QInEnumerator)
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        for (int i = 0; i < QInEnumerator.size(); ++i) {
            mappedPointersToQIn[patchIndex][i] = mappedPointersToQInPacked[patchIndex][i];
        }
    }
    #pragma omp target distribute parallel for simd device(targetDevice) 
    for (int i = 0; i < Dimensions * numberOfCells; ++i) {
        rawPointerToCellCentre[i] = rawPointerToCellCentrePacked[i];
        rawPointerToCellSize[i] = rawPointerToCellSizePacked[i];
    }
    #pragma omp target distribute parallel for simd  device(targetDevice)
    for (int i = 0; i < numberOfCells; ++i) {
        t[i] = tPacked[i];
        dt[i] = dtPacked[i];
    }

    for (int i = 0; i < IterationsPerTransfer; ++i) {
  internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(
    targetDevice,
    numberOfCells,
    mappedPointersToQIn,
    rawPointerToCellCentre,
    rawPointerToCellSize,
    t,
    dt,
    maxEigenvalue,
    mappedPointersToQOut,
    tempFluxX,
    tempFluxY,
    tempFluxZ,
    tempNonconservativeProductX,
    tempNonconservativeProductY,
    tempNonconservativeProductZ,
    tempEigenvalueX,
    tempEigenvalueY,
    tempEigenvalueZ
  );
    }

    // convert to PackedDouble on GPU
    #pragma omp target teams distribute parallel for simd collapse(2) firstprivate(QOutEnumerator)
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        for (int i = 0; i < QOutEnumerator.size(); ++i) {
            mappedPointersToQOutPacked[patchIndex][i] = mappedPointersToQOut[patchIndex][i];
        }
    }

    #pragma omp target teams distribute parallel for simd
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        maxEigenvaluePacked[patchIndex] = maxEigenvalue[patchIndex];
    }
    

    // release buffers
    #pragma omp target exit data map(delete: mappedPointersToQIn[0: numberOfCells])
    #pragma omp target exit data map(delete: mappedPointersToQOut[0: numberOfCells])


#pragma omp target exit data map(delete : rawPointerToCellCentrePacked[0 : numberOfCells * Dimensions]) device(targetDevice) 
#pragma omp target exit data map(delete : rawPointerToCellSizePacked[0 : numberOfCells * Dimensions]) device(targetDevice) 
#pragma omp target exit data map(delete : mappedPointersToQInPacked[0 : numberOfCells]) device(targetDevice) 
#pragma omp target exit data map(delete : mappedPointersToQOutPacked[0 : numberOfCells]) device(targetDevice) 
#pragma omp target exit data map(delete : tPacked[0 : numberOfCells]) device(targetDevice) 
#pragma omp target exit data map(delete : dtPacked[0 : numberOfCells]) device(targetDevice) 
#pragma omp target exit data map(from : maxEigenvaluePacked[0 : numberOfCells]) device(targetDevice) 

#pragma omp target exit data map(delete : tempFluxX[0 : fluxEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempFluxY[0 : fluxEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempFluxZ[0 : fluxEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempNonconservativeProductX[0 : ncpEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempNonconservativeProductY[0 : ncpEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempNonconservativeProductZ[0 : ncpEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempEigenvalueX[0 : eigenvalueEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempEigenvalueY[0 : eigenvalueEnumerator.size()]) device(targetDevice) 
#pragma omp target exit data map(delete : tempEigenvalueZ[0 : eigenvalueEnumerator.size()]) device(targetDevice) 

    for (int patchIndex = 0; patchIndex < numberOfCells; patchIndex++) {
        const PackedDouble* currentQInPacked  = QInPacked[patchIndex];
        PackedDouble*       currentQOutPacked = QOutPacked[patchIndex];
#pragma omp target exit data map(delete : currentQInPacked[0 : QInEnumerator.size()]) device(targetDevice)
#pragma omp target exit data map(from : currentQOutPacked[0 : QOutEnumerator.size()]) device(targetDevice)
    }


    omp_target_free(rawPointerToCellCentre, targetDevice);
    omp_target_free(rawPointerToCellSize, targetDevice);
    omp_target_free(t, targetDevice);
    omp_target_free(dt, targetDevice);
    omp_target_free(maxEigenvalue, targetDevice);

    for (int i = 0; i < numberOfCells; ++i) {
        omp_target_free(mappedPointersToQIn[i], targetDevice);
        omp_target_free(mappedPointersToQOut[i], targetDevice);
    }

    delete[] mappedPointersToQIn;
    delete[] mappedPointersToQOut;




     //debug 
    //for (int i = 0; i < 5; ++i) {
        //std::printf("%f\n", (double)QOutPacked[0][i]);
    //}
    //std::printf("\n");

    // convert to double
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        internal::copyPackedToDouble(patchData.QOut[patchIndex], QOutPacked[patchIndex], QOutEnumerator.size());
    }
    for (int patchIndex = 0; patchIndex < numberOfCells; ++patchIndex) {
        patchData.maxEigenvalue[patchIndex] = maxEigenvaluePacked[patchIndex];
    }
    

//#pragma omp taskwait
    // free

    for (int i = 0; i < numberOfCells; ++i) {
        delete[] QInPacked[i];
    }
    delete[] QInPacked;
    for (int i = 0; i < numberOfCells; ++i) {
        delete[] QOutPacked[i];
    }
    delete[] QOutPacked;

  delete[] mappedPointersToQInPacked;
  delete[] mappedPointersToQOutPacked;

  delete[] rawPointerToCellCentrePacked;
  delete[] rawPointerToCellSizePacked;
  delete[] tPacked;
  delete[] dtPacked;
  delete[] maxEigenvaluePacked;

  if (tempFluxX != nullptr) {
    delete[] tempFluxX;
  }
  if (tempFluxY != nullptr) {
    delete[] tempFluxY;
  }
  if (tempFluxZ != nullptr) {
    delete[] tempFluxZ;
  }
  if (tempNonconservativeProductX != nullptr) {
    delete[] tempNonconservativeProductX;
  }
  if (tempNonconservativeProductY != nullptr) {
    delete[] tempNonconservativeProductY;
  }
  if (tempNonconservativeProductZ != nullptr) {
    delete[] tempNonconservativeProductZ;
  }
  if (tempEigenvalueX != nullptr) {
    delete[] tempEigenvalueX;
  }
  if (tempEigenvalueY != nullptr) {
    delete[] tempEigenvalueY;
  }
  if (tempEigenvalueZ != nullptr) {
    delete[] tempEigenvalueZ;
  }

}
