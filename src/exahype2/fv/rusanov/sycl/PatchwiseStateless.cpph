// This file is part of the ExaHyPE2 project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org

template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless(int targetDevice, auto& patchData) {
  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const TempDataEnumeratorType                  fluxEnumerator(patchData.numberOfCells, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, 0);
  const TempDataEnumeratorType                  ncpEnumerator(patchData.numberOfCells, NumberOfVolumesPerAxisInPatch + 1, HaloSize, NumberOfUnknowns, 0);
  const TempDataEnumeratorType                  eigenvalueEnumerator(patchData.numberOfCells, NumberOfVolumesPerAxisInPatch, HaloSize, 1, 0);

  double* tempFluxX                   = EvaluateFlux ? ::sycl::malloc_device<double>(fluxEnumerator.size(), queue) : nullptr;
  double* tempFluxY                   = EvaluateFlux ? ::sycl::malloc_device<double>(fluxEnumerator.size(), queue) : nullptr;
  double* tempFluxZ                   = EvaluateFlux and Dimensions == 3 ? ::sycl::malloc_device<double>(fluxEnumerator.size(), queue) : nullptr;
  double* tempNonconservativeProductX = EvaluateNonconservativeProduct ? ::sycl::malloc_device<double>(ncpEnumerator.size(), queue) : nullptr;
  double* tempNonconservativeProductY = EvaluateNonconservativeProduct ? ::sycl::malloc_device<double>(ncpEnumerator.size(), queue) : nullptr;
  double* tempNonconservativeProductZ = EvaluateNonconservativeProduct and Dimensions == 3 ? ::sycl::malloc_device<double>(ncpEnumerator.size(), queue) : nullptr;
  double* tempEigenvalueX             = ::sycl::malloc_device<double>(eigenvalueEnumerator.size(), queue);
  double* tempEigenvalueY             = ::sycl::malloc_device<double>(eigenvalueEnumerator.size(), queue);
  double* tempEigenvalueZ             = ::sycl::malloc_device<double>(eigenvalueEnumerator.size(), queue);

  const std::size_t numberOfPatches = patchData.numberOfCells;

#if Dimensions == 2
  ::sycl::range<2> totalWorkItem{NumberOfVolumesPerAxisInPatch, (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * numberOfPatches};
  ::sycl::range<2> workgroupSize{NumberOfVolumesPerAxisInPatch, NumberOfVolumesPerAxisInPatch + 2 * HaloSize};
#else
  ::sycl::range<3> totalWorkItem{NumberOfVolumesPerAxisInPatch, NumberOfVolumesPerAxisInPatch, (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * numberOfPatches};
  ::sycl::range<3> workgroupSize{NumberOfVolumesPerAxisInPatch, NumberOfVolumesPerAxisInPatch, NumberOfVolumesPerAxisInPatch + 2 * HaloSize};
#endif

  ::sycl::event event = queue.submit([&](::sycl::handler& handle) {
    handle.parallel_for(
#if Dimensions == 2
      ::sycl::nd_range<2>{totalWorkItem, workgroupSize},
      [=](::sycl::nd_item<2> i) {
        int patchIndex = i.get_group(1);
        int y          = i.get_local_id(0);
        int x          = i.get_local_id(1);
        int z;
#else
      ::sycl::nd_range<3>{totalWorkItem, workgroupSize},
      [=](::sycl::nd_item<3> i) {
        int patchIndex = i.get_group(2);
        int z          = i.get_local_id(0);
        int y          = i.get_local_id(1);
        int x          = i.get_local_id(2);
#endif

        // ====================================================
        // Copy solution over and evaluate source (if required)
        // ====================================================
        if constexpr (EvaluateSource) {
          if (x < NumberOfVolumesPerAxisInPatch) {
            loopbodies::copySolutionAndAddSourceTerm<SolverType>(
              patchData.QIn[patchIndex],
              QInEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
#if Dimensions == 2
              volumeIndex(x, y),
#endif
#if Dimensions == 3
              volumeIndex(x, y, z),
#endif
              patchData.t[patchIndex],
              patchData.dt[patchIndex],
              patchData.QOut[patchIndex],
              QOutEnumerator
            );
          }
        } else {
          if (x < NumberOfVolumesPerAxisInPatch) {
            for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
              loopbodies::copySolution(
                patchData.QIn[patchIndex],
                QInEnumerator,
                patchIndex,
#if Dimensions == 2
                volumeIndex(x, y),
#endif
#if Dimensions == 3
                volumeIndex(x, y, z),
#endif
                unknown,
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
        }

      // ====================================================
      // Compute damping due to max eigenvalue
      // ====================================================
#if Dimensions == 2
        x = i.get_local_id(1) - HaloSize;
        loopbodies::computeMaxEigenvalue<SolverType>(
          patchData.QIn[patchIndex],
          QInEnumerator,
          patchData.cellCentre[patchIndex],
          patchData.cellSize[patchIndex],
          patchIndex,
          volumeIndex(x, y),
          patchData.t[patchIndex],
          patchData.dt[patchIndex],
          0,
          tempEigenvalueX,
          eigenvalueEnumerator
        );
        loopbodies::computeMaxEigenvalue<SolverType>(
          patchData.QIn[patchIndex],
          QInEnumerator,
          patchData.cellCentre[patchIndex],
          patchData.cellSize[patchIndex],
          patchIndex,
          volumeIndex(y, x),
          patchData.t[patchIndex],
          patchData.dt[patchIndex],
          1,
          tempEigenvalueY,
          eigenvalueEnumerator
        );

        i.barrier();
        x += HaloSize;
        if (x < NumberOfVolumesPerAxisInPatch) {
          for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
            loopbodies::updateSolutionWithEigenvalueDamping(
              patchData.QIn[patchIndex],
              QInEnumerator,
              tempEigenvalueX,
              tempEigenvalueY,
              tempEigenvalueZ,
              eigenvalueEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y),
              unknown,
              patchData.dt[patchIndex],
              patchData.QOut[patchIndex],
              QOutEnumerator
            );
          }
        }
#else
        x              = i.get_local_id(2) - HaloSize;
        loopbodies::computeMaxEigenvalue<SolverType>(
          patchData.QIn[patchIndex],
          QInEnumerator,
          patchData.cellCentre[patchIndex],
          patchData.cellSize[patchIndex],
          patchIndex,
          volumeIndex(x, y, z),
          patchData.t[patchIndex],
          patchData.dt[patchIndex],
          0,
          tempEigenvalueX,
          eigenvalueEnumerator
        );
        loopbodies::computeMaxEigenvalue<SolverType>(
          patchData.QIn[patchIndex],
          QInEnumerator,
          patchData.cellCentre[patchIndex],
          patchData.cellSize[patchIndex],
          patchIndex,
          volumeIndex(z, x, y),
          patchData.t[patchIndex],
          patchData.dt[patchIndex],
          1,
          tempEigenvalueY,
          eigenvalueEnumerator
        );
        loopbodies::computeMaxEigenvalue<SolverType>(
          patchData.QIn[patchIndex],
          QInEnumerator,
          patchData.cellCentre[patchIndex],
          patchData.cellSize[patchIndex],
          patchIndex,
          volumeIndex(y, z, x),
          patchData.t[patchIndex],
          patchData.dt[patchIndex],
          2,
          tempEigenvalueZ,
          eigenvalueEnumerator
        );

        i.barrier();
        x += HaloSize;
        if (x < NumberOfVolumesPerAxisInPatch) {
          for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
            loopbodies::updateSolutionWithEigenvalueDamping(
              patchData.QIn[patchIndex],
              QInEnumerator,
              tempEigenvalueX,
              tempEigenvalueY,
              tempEigenvalueZ,
              eigenvalueEnumerator,
              patchData.cellCentre[patchIndex],
              patchData.cellSize[patchIndex],
              patchIndex,
              volumeIndex(x, y, z),
              unknown,
              patchData.dt[patchIndex],
              patchData.QOut[patchIndex],
              QOutEnumerator
            );
          }
        }
#endif

        // ====================================================
        // Normal (conservative) flux
        // ====================================================
        if constexpr (EvaluateFlux) {
#if Dimensions == 2
          x = i.get_local_id(1) - HaloSize;
          loopbodies::computeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            0, // normal
            tempFluxX,
            fluxEnumerator
          );
          loopbodies::computeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(y, x),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            1, // normal
            tempFluxY,
            fluxEnumerator
          );

          i.barrier();
          x += HaloSize;
          if (x < NumberOfVolumesPerAxisInPatch) {
            for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
              loopbodies::updateSolutionWithFlux(
                tempFluxX,
                tempFluxY,
                tempFluxZ,
                fluxEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                unknown,
                patchData.dt[patchIndex],
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
#else
          x = i.get_local_id(2) - HaloSize;
          loopbodies::computeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y, z),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            0, // normal
            tempFluxX,
            fluxEnumerator
          );
          loopbodies::computeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(z, x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            1, // normal
            tempFluxY,
            fluxEnumerator
          );
          loopbodies::computeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(y, z, x),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            2, // normal
            tempFluxZ,
            fluxEnumerator
          );

          i.barrier();
          x += HaloSize;
          if (x < NumberOfVolumesPerAxisInPatch) {
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithFlux(
                tempFluxX,
                tempFluxY,
                tempFluxZ,
                fluxEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                unknown,
                patchData.dt[patchIndex],
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
#endif
        }

        if constexpr (EvaluateNonconservativeProduct) {
#if Dimensions == 2
          x = i.get_local_id(1) - HaloSize;
          loopbodies::computeNonconservativeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            0, // normal
            tempNonconservativeProductX,
            ncpEnumerator
          );
          loopbodies::computeNonconservativeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(y, x),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            1, // normal
            tempNonconservativeProductY,
            ncpEnumerator
          );

          i.barrier();
          x += HaloSize;
          if (x < NumberOfVolumesPerAxisInPatch) {
            for (int unknown = 0; unknown < NumberOfUnknowns + NumberOfAuxiliaryVariables; unknown++) {
              loopbodies::updateSolutionWithNonconservativeFlux(
                tempNonconservativeProductX,
                tempNonconservativeProductY,
                tempNonconservativeProductZ,
                ncpEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                unknown,
                patchData.dt[patchIndex],
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
#else
          x = i.get_local_id(2) - HaloSize;
          loopbodies::computeNonconservativeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(x, y, z),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            0, // normal
            tempNonconservativeProductX,
            ncpEnumerator
          );
          loopbodies::computeNonconservativeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(z, x, y),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            1, // normal
            tempNonconservativeProductY,
            ncpEnumerator
          );
          loopbodies::computeNonconservativeFlux<SolverType>(
            patchData.QIn[patchIndex],
            QInEnumerator,
            patchData.cellCentre[patchIndex],
            patchData.cellSize[patchIndex],
            patchIndex,
            volumeIndex(y, z, x),
            patchData.t[patchIndex],
            patchData.dt[patchIndex],
            2, // normal
            tempNonconservativeProductZ,
            ncpEnumerator
          );

          i.barrier();
          x += HaloSize;
          if (x < NumberOfVolumesPerAxisInPatch) {
            for (int unknown = 0; unknown < NumberOfUnknowns; unknown++) {
              loopbodies::updateSolutionWithNonconservativeFlux(
                tempNonconservativeProductX,
                tempNonconservativeProductY,
                tempNonconservativeProductZ,
                ncpEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                unknown,
                patchData.dt[patchIndex],
                patchData.QOut[patchIndex],
                QOutEnumerator
              );
            }
          }
#endif
        }

        i.barrier();
        if constexpr (EvaluateMaximumEigenvalueAfterTimeStep) {
#if Dimensions == 2
          x = i.get_local_id(1);
          if (x < NumberOfVolumesPerAxisInPatch) {
            tempEigenvalueX[patchIndex * NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) + (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * y + x]
              = loopbodies::reduceMaxEigenvalue<SolverType>(
                patchData.QOut[patchIndex],
                QOutEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y),
                patchData.t[patchIndex],
                patchData.dt[patchIndex]
              );
          } else {
            tempEigenvalueX[patchIndex * NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) + (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * y + x] = 0;
          }
          patchData.maxEigenvalue[patchIndex] = ::sycl::reduce_over_group(
            i.get_group(),
            tempEigenvalueX[patchIndex * NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) + (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * y + x],
            ::sycl::maximum<>()
          );
#else
          x = i.get_local_id(2);
          if (x < NumberOfVolumesPerAxisInPatch) {
            tempEigenvalueX
              [patchIndex * NumberOfVolumesPerAxisInPatch * NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize)
               + NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * z + (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * y + x]
              = loopbodies::reduceMaxEigenvalue<SolverType>(
                patchData.QOut[patchIndex],
                QOutEnumerator,
                patchData.cellCentre[patchIndex],
                patchData.cellSize[patchIndex],
                patchIndex,
                volumeIndex(x, y, z),
                patchData.t[patchIndex],
                patchData.dt[patchIndex]
              );
          } else {
            tempEigenvalueX
              [patchIndex * NumberOfVolumesPerAxisInPatch * NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize)
               + NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * z + (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * y + x]
              = 0;
          }
          patchData.maxEigenvalue[patchIndex] = ::sycl::reduce_over_group(
            i.get_group(),
            tempEigenvalueX
              [patchIndex * NumberOfVolumesPerAxisInPatch * NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize)
               + NumberOfVolumesPerAxisInPatch * (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * z + (NumberOfVolumesPerAxisInPatch + 2 * HaloSize) * y + x],
            ::sycl::maximum<>()
          );
#endif
        }
      }
    );
  });
  event.wait();

  if (tempFluxX != nullptr) {
    ::sycl::free(tempFluxX, queue);
  }
  if (tempFluxY != nullptr) {
    ::sycl::free(tempFluxY, queue);
  }
  if (tempFluxZ != nullptr) {
    ::sycl::free(tempFluxZ, queue);
  }
  if (tempNonconservativeProductX != nullptr) {
    ::sycl::free(tempNonconservativeProductX, queue);
  }
  if (tempNonconservativeProductY != nullptr) {
    ::sycl::free(tempNonconservativeProductY, queue);
  }
  if (tempNonconservativeProductZ != nullptr) {
    ::sycl::free(tempNonconservativeProductZ, queue);
  }
  if (tempEigenvalueX != nullptr) {
    ::sycl::free(tempEigenvalueX, queue);
  }
  if (tempEigenvalueY != nullptr) {
    ::sycl::free(tempEigenvalueY, queue);
  }
  if (tempEigenvalueZ != nullptr) {
    ::sycl::free(tempEigenvalueZ, queue);
  }
}


template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::timeStepWithRusanovPatchwiseUSMStateless(int targetDevice, CellData& patchData) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::sycl");
  logTraceIn("timeStepWithRusanovPatchwiseUSMStateless()");

  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  GPUUSMCellData                                gpuPatchData(patchData, QInEnumerator, QOutEnumerator, queue);

  exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, gpuPatchData);

  gpuPatchData.destroy(patchData, QOutEnumerator, EvaluateMaximumEigenvalueAfterTimeStep, queue);

  logTraceOut("timeStepWithRusanovPatchwiseUSMStateless()");
}


template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::timeStepWithRusanovPatchwiseHeapStateless(int targetDevice, CellData& patchData) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::sycl");
  logTraceIn("timeStepWithRusanovPatchwiseHeapStateless()");

  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  GPUCopyCellData                               gpuPatchData(patchData, QInEnumerator, QOutEnumerator, queue);

  exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, gpuPatchData);

  gpuPatchData.destroy(patchData, QOutEnumerator, EvaluateMaximumEigenvalueAfterTimeStep, queue);

  logTraceOut("timeStepWithRusanovPatchwiseHeapStateless()");
}


template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::timeStepWithRusanovPatchwiseManagedStateless(int targetDevice, CellData& patchData) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::sycl");
  logTraceIn("timeStepWithRusanovPatchwiseManagedStateless()");

  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  GPUManagedCellData                            gpuPatchData(patchData, QInEnumerator, QOutEnumerator, queue);

  exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, gpuPatchData);

  gpuPatchData.destroy(patchData, QOutEnumerator, EvaluateMaximumEigenvalueAfterTimeStep, queue);

  logTraceOut("timeStepWithRusanovPatchwiseManagedStateless()");
}


template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::timeStepWithRusanovPatchwiseUSMStateless(int targetDevice, CellData& patchData, ::tarch::timing::Measurement& measurement) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::sycl");
  logTraceIn("timeStepWithRusanovPatchwiseUSMStateless()");

  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  const enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  const enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  GPUUSMCellData                                gpuPatchData(patchData, QInEnumerator, QOutEnumerator, queue);

  tarch::timing::Watch watch("exahype2::fv::rusanov::sycl", "timeStepWithRusanovPatchwiseUSMStateless", false, true);
  exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, gpuPatchData);
  watch.stop();
  measurement.setValue(watch.getCalendarTime());

  gpuPatchData.destroy(patchData, QOutEnumerator, EvaluateMaximumEigenvalueAfterTimeStep, queue);

  logTraceOut("timeStepWithRusanovPatchwiseUSMStateless()");
}


template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::timeStepWithRusanovPatchwiseHeapStateless(int targetDevice, CellData& patchData, ::tarch::timing::Measurement& measurement) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::sycl");
  logTraceIn("timeStepWithRusanovPatchwiseHeapStateless()");

  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  GPUCopyCellData                         gpuPatchData(patchData, QInEnumerator, QOutEnumerator, queue);

  tarch::timing::Watch watch("exahype2::fv::rusanov::sycl", "timeStepWithRusanovPatchwiseHeapStateless", false, true);
  exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, gpuPatchData);
  watch.stop();
  measurement.setValue(watch.getCalendarTime());

  gpuPatchData.destroy(patchData, QOutEnumerator, EvaluateMaximumEigenvalueAfterTimeStep, queue);

  logTraceOut("timeStepWithRusanovPatchwiseHeapStateless()");
}


template <
  class SolverType,
  std::size_t NumberOfVolumesPerAxisInPatch,
  std::size_t HaloSize,
  std::size_t NumberOfUnknowns,
  std::size_t NumberOfAuxiliaryVariables,
  bool        EvaluateFlux,
  bool        EvaluateNonconservativeProduct,
  bool        EvaluateSource,
  bool        EvaluateMaximumEigenvalueAfterTimeStep,
  class TempDataEnumeratorType>
void exahype2::fv::rusanov::sycl::timeStepWithRusanovPatchwiseManagedStateless(int targetDevice, CellData& patchData, ::tarch::timing::Measurement& measurement) {
  static_assert(HaloSize == 1);

  static tarch::logging::Log _log("exahype2::fv::rusanov::sycl");
  logTraceIn("timeStepWithRusanovPatchwiseManagedStateless()");

  ::sycl::queue& queue = tarch::accelerator::getSYCLQueue(targetDevice);

  enumerator::AoSLexicographicEnumerator QInEnumerator(1, NumberOfVolumesPerAxisInPatch, HaloSize, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  enumerator::AoSLexicographicEnumerator QOutEnumerator(1, NumberOfVolumesPerAxisInPatch, 0, NumberOfUnknowns, NumberOfAuxiliaryVariables);
  GPUManagedCellData                      gpuPatchData(patchData, QInEnumerator, QOutEnumerator, queue);

  tarch::timing::Watch watch("exahype2::fv::rusanov::sycl", "timeStepWithRusanovPatchwiseManagedStateless", false, true);
  exahype2::fv::rusanov::sycl::internal::timeStepWithRusanovPatchwiseStateless<
    SolverType,
    NumberOfVolumesPerAxisInPatch,
    HaloSize,
    NumberOfUnknowns,
    NumberOfAuxiliaryVariables,
    EvaluateFlux,
    EvaluateNonconservativeProduct,
    EvaluateSource,
    EvaluateMaximumEigenvalueAfterTimeStep,
    TempDataEnumeratorType>(targetDevice, gpuPatchData);
  watch.stop();
  measurement.setValue(watch.getCalendarTime());

  gpuPatchData.destroy(patchData, QOutEnumerator, EvaluateMaximumEigenvalueAfterTimeStep, queue);

  logTraceOut("timeStepWithRusanovPatchwiseManagedStateless()");
}
