#include "peano4/utils/Loop.h"


template <typename Vertex>
std::set<::swift2::TaskNumber> swift2::getVertexNumbersOfParentVertices(
  tarch::la::Vector<Dimensions, int>               position,
  peano4::datamanagement::VertexEnumerator<Vertex> coarseGridVertices,
  ::swift2::TaskNumber::TaskAssociation            taskAssociation,
  int                                              dimension
) {
  if (dimension == -1) {
    std::set<::swift2::TaskNumber> result;
    result.insert(::swift2::TaskNumber{
      coarseGridVertices(peano4::utils::dLinearised(position, 2)).getNumber(), taskAssociation});
    return result;
  } else if (position(dimension) == 0) {
    return getVertexNumbersOfParentVertices(position, coarseGridVertices, taskAssociation, dimension - 1);
  } else if (position(dimension) == 3) {
    position(dimension) = 1;
    return getVertexNumbersOfParentVertices(position, coarseGridVertices, taskAssociation, dimension - 1);
  } else {
    std::set<::swift2::TaskNumber> result;
    position(dimension)                 = 0;
    std::set<::swift2::TaskNumber> left = getVertexNumbersOfParentVertices(
      position, coarseGridVertices, taskAssociation, dimension - 1
    );
    position(dimension)                  = 1;
    std::set<::swift2::TaskNumber> right = getVertexNumbersOfParentVertices(
      position, coarseGridVertices, taskAssociation, dimension - 1
    );
    result.insert(left.begin(), left.end());
    result.insert(right.begin(), right.end());
    return result;
  }
}


template <typename Vertex>
std::set<::swift2::TaskNumber> swift2::getVertexNumbersOfParentVertices(
  const peano4::datamanagement::VertexMarker&      marker,
  peano4::datamanagement::VertexEnumerator<Vertex> coarseGridVertices,
  ::swift2::TaskNumber::TaskAssociation            taskAssociation
) {
  return getVertexNumbersOfParentVertices(
    marker.getRelativePositionWithinFatherCell(), coarseGridVertices, taskAssociation, Dimensions - 1
  );
}
