#include "peano4/datamanagement/CellMarker.h"
#include "peano4/datamanagement/VertexMarker.h"
#include "tarch/la/VectorOperations.h"


template <typename Particle>
toolbox::particles::ParticleReassociationInstruction toolbox::particles::getParticleReassociationInstructionWithinCellWithIntraCellReassignment(
  const Particle& particle, const ::peano4::datamanagement::CellMarker& marker, int numberOfVertexWithinCell
) {
  return getParticleReassociationInstructionWithinCellWithIntraCellReassignment(
    particle.getParallelState() == Particle::ParallelState::Local, particle.getSearchRadius(), particle.getX(), marker, numberOfVertexWithinCell
  );
}

template <typename Particle>
toolbox::particles::ParticleReassociationInstruction toolbox::particles::liftParticleAssociatedWithVertex(
  const Particle& particle, const peano4::datamanagement::VertexMarker marker
) {
  return liftParticleAssociatedWithVertex(particle.getParallelState() == Particle::ParallelState::Local, particle.getSearchRadius(), particle.getX(), marker);
}


template <typename Particle>
bool toolbox::particles::sieveParticle(const Particle& particle, const ::peano4::datamanagement::VertexMarker& marker) {
  return sieveParticle(particle.getSearchRadius(), particle.getX(), marker);
}


template <typename Particle>
bool toolbox::particles::particleWillBeDroppedFurther(const Particle& particle, const peano4::datamanagement::CellMarker& marker) {
  return particleWillBeDroppedFurther(particle.getSearchRadius(), marker);
}


template <typename Particle>
bool toolbox::particles::particleWillBeDroppedFurther(const Particle& particle, const peano4::datamanagement::VertexMarker& marker) {
  return particleWillBeDroppedFurther(particle.getSearchRadius(), marker);
}


template <typename Particle>
bool toolbox::particles::dropParticle(const Particle& particle, const peano4::datamanagement::VertexMarker& marker) {
  return dropParticle(particle.getSearchRadius(), particle.getX(), marker);
}
