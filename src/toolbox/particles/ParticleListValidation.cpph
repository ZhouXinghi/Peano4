template <typename T>
void toolbox::particles::ensureAllParticleListsAreGatheredOrEmpty(
  peano4::datamanagement::VertexEnumerator<T> vertices
) {
  for (int i=0; i<TwoPowerD; i++) {
    assertion2(
      vertices(i).isGathered() or vertices(i).empty(),
      i, vertices(i).toString()
    );
  }
}



template <typename T>
void toolbox::particles::ensureThatParticleListsEncodeContinuousMemoryChunks(
  const std::list<T*>       activeParticles,
  const std::vector<int>&   numberOfParticlesPerVertexAdded
) {
  typename std::list<T*>::const_iterator iterator = activeParticles.begin();

  for (auto chunkSize: numberOfParticlesPerVertexAdded) {
    T*  firstParticleOfThisChunk = *iterator;
    for (int particleInThisChunk=0; particleInThisChunk<chunkSize; particleInThisChunk++) {
      assertion(iterator != activeParticles.end());
      void* iteratorsRawPointer = *iterator;
      void* arrayRawPointer     = firstParticleOfThisChunk + particleInThisChunk;
      assertionEquals2(
        iteratorsRawPointer, arrayRawPointer,
        (*iterator)->toString(),
        firstParticleOfThisChunk[particleInThisChunk].toString()
      );
      iterator++;
    }
  }
}
