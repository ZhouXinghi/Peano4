#pragma once
#include <cstring>
#include <iostream>
#include <type_traits>


template <typename ParticleContainer>
void swift2::dastgenTest::checkDastgen(ParticleContainer& assignedParticles) {

  for (auto& particle : assignedParticles) {
    checkBooleans(*particle);
    checkDoubles(*particle);
    checkEnums(*particle);
    checkIntegers(*particle);
    checkStrings(*particle);

    checkBooleanArrays(*particle);
    checkDoubleArrays(*particle);
    checkIntegerArrays(*particle);

    checkPeanoDoubleArrays(*particle);
    checkPeanoIntegerArrays(*particle);
  }

  checkConstructors();
}


template <typename Particle>
void swift2::dastgenTest::dummyMoveForwardInTime() {

  // Deliberately hardcoded for sim to run 2 steps.
  Particle::getSpecies().setTimeStepSize(0.5);
}


template <typename Particle>
void swift2::dastgenTest::reportStep(const std::string& particleName) {
  if (tarch::mpi::Rank::getInstance().isGlobalMaster()) {
    static tarch::logging::Log _log("dastgenTest");

    logInfo("reportStep()", "===============");
    logInfo("reportStep()", particleName);
    logInfo("reportStep()", "t=" << Particle::getSpecies().getMinTimeStamp());
    logInfo(
      "reportStep()", "dt=" << Particle::getSpecies().getMinTimeStepSize()
    );
    logInfo("reportStep()", "===============");
  }
}
