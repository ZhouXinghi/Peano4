/**
 
 @page tutorials_documentation_multigrid_petsc_mixed_galerkin_poisson Mixed Galerkin for the Poisson equation with PETSc
 
A brief, informal discussion how to implement mixed Galerkin methods with PETSc within Peano.

<!-- Add this one for href links to subitems -->
\tableofcontents

This is a brief discussion of key ideas behind Mixed Galerkin (DG) methods. 
While we discuss some of the mathematics behind mixed formulations, the text is
informal (from a maths point of view) but puts special emphasis
on how numerical concepts are mapped onto Peano's data structures and mesh 
traversal. 
We focus notably on the combination of mixed methods with 
@ref tutorials_documentation_multigrid_petsc_discontinuous_galerkin_poisson "Discontinous Galerkin" methods.
One can use mixed continuous Galerkin methods, but they are not particular 
widespread due to multiple numerical issues.
The script code resulting from this tutorial can be found in benchmarks/multigrid/petsc/mixed.py.


@include{doc} tutorials/multigrid/generic-mixed-DG.dox



### Remarks on DG vs CG

If we use a mixed formulation within globally continuous shape functions, 
the boundary integrals over @f$ u @f$ disappear as they form a telescope sum.
The fact that @f$ u @f$ is continuous however does not imply that the gradients
are continuous, too. 
Unless we enforce this, we have to use a DG method for the "mixed" part of the 
equations even though we kicked off with a CG model for the primary unknown.

In general, having a continuous space for both types of quantities implies that
the spaces are not compatible with each other: A continuous @f$ \phi @f$ space 
is too restrictive to represent the derivatives. If we try to "approximate"
them therein, we will end up with some inconsistent representations.

Therefore DG is a natural choice for mixed formulations. As we need DG for the
helper PDEs anyway, it is reasonably to start with DG from the first place.
It makes no sense to change your working horse. 


With DG in place, we note that we will need a Rusanov solver for the arising
terms along the faces, which are, once again, not analytically defined.
Different to the @ref page_multigrid_numerics_Disontinuous_Galerkin "introductory DG discussion",
we now have multiple jumps to take into account.
For the Poisson equation, e.g., 

- @f$ (n, \phi ) @f$ does not exist on the faces of a cell. It jumps. The term  @f$ \int_{\partial \text{cell}_{v _\phi }} (n \cdot \phi) v _\phi dS(x) @f$ in the first weak formulation therefore does not make sense.
- @f$ u @f$ does not exist on the faces of a cell. It jumps. The term  @f$ \int _{\partial \text{cell}_{v _u}}  u \cdot (n, v _u) dS(x) @f$ in the second weak formulation therefore does not make sense. 

These terms that make no sense require special attention, and this is the 
fundamental "plug-in" point for @ref page_multigrid_numerics_Hybrid_DG "hybrid DG".
We however stick to details on mixed Galerkin on this page.


# Mapping onto Peano's PETSc multigrid extension

Once we commit to the formulation 

\f{eqnarray*}{
  - \text{div} \ \phi & = & f, \\
  \nabla u & = & \phi. 
\f}

and omit, for the time being, the right-hand side, as see that this system of 
PDEs translates 1:1 onto two @ref tutorials_documentation_multigrid_petsc_discontinuous_galerkin_poisson "Discontinuous Galerkin"
solvers:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
primary_solver = multigrid.petsc.solvers.DiscontinuousGalerkinDiscretisation(name                 = "Poisson_PrimaryVariable",
                                                                     polynomial_degree    = args.degree,
                                                                     cell_unknowns        = 1,                      # unknowns_per_cell_dof,
                                                                     face_unknowns        = 1,                      # unknowns_per_face_dof,
                                                                     dimensions           = args.dimensions,
                                                                     cell_cell_rhs_matrix   = [...],     
                                                                     cell_cell_lhs_matrix   = [...],
                                                                     cell_cell_lhs_matrix_scaling = args.dimensions-1,
                                                                     cell_cell_rhs_matrix_scaling = args.dimensions,
                                                                     [...]
                                                                     )
gradient_solver = multigrid.petsc.solvers.DiscontinuousGalerkinDiscretisation(name                 = "Poisson_Gradients",
                                                                     polynomial_degree    = args.degree,
                                                                     cell_unknowns        = args.dimensions,        # unknowns_per_cell_dof,
                                                                     face_unknowns        = 1,                      # unknowns_per_face_dof,
                                                                     dimensions           = args.dimensions,
                                                                     cell_cell_rhs_matrix   = [...],     
                                                                     cell_cell_lhs_matrix   = [...],
                                                                     cell_cell_lhs_matrix_scaling = args.dimensions-1,
                                                                     cell_cell_rhs_matrix_scaling = [...],
                                                                     [...]
                                                                     )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The primary solver is a scalar PDE, where we have a derivative on the left-hand
side. As we integrate over the domain left and right, we get a scaling of 
@f$ h^{d-1} @f$ on the left-hand and a scaling of @f$ h^{d} @f$ on the 
right-hand side. These scalings are encoded within cell_cell_lhs_matrix_scaling
and cell_cell_rhs_matrix_scaling.


The gradient solver represents a system of PDEs with @f$ d @f$ 
unknowns/equations. Again we have one derivative on the left-hand side and 
therefore a scaling of @f$ h^{d-1} @f$. Different to the primary solver,
we do not project the "whole" approximation onto the face (which is only
a scalar anyway, so the term "whole" makes limited sense"), but we only 
the normal component. Therefore, this solver uses

~~~~~~~~~~~~~~~~~~~~~~~~~~~~
face_unknowns        = 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         
two even though the cells' hold vector unknowns.
         
The other ingredients, i.e. the Riemann solver and the cell-to-face projections
all follow 1:1 the discussion for the 
@ref tutorials_documentation_multigrid_petsc_discontinuous_galerkin_poisson "Discontinuous Galerkin"
solver. We have to set them per PDE system, but they are totally analogous.


The coupling between the two solvers is realised through the right-hand side
of the gradient_solver. This part requires some work (it is actually the only
part that requires additional work compared to the discontinuous Galerkin), as
the solvers, so far, know nothing of each other: 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gradient_solver.right_hand_size_assembly = xxxxx
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 */



 